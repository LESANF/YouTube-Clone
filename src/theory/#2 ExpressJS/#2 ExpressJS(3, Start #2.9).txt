MVC Pattern part One

MVC = Model, View, Controller

M = data ( 데이터 )
V = how does the data look ( 데이터가 어떻게 생겼는지 )
C = function that looks for the data ( 데이터를 보여주는 함수 )

이건 패턴(pattern)같은 것이고, 일종의 끝내주는 구조(structure)같은 것.

router.js 있는 코드를 URL과 Function을 분리 할 것이다. 데이터의 모습에 맞춰서.

우리는 한 가지에대한 router를 가질거니까, router.js -> userRouter.js (파일명 변경)

그리고 videoRouter.js를 생성하여 2개의 Router파일을 routers 폴더에넣어줌.

userRouter들의 route들을 지우고 videoRouter에 다음과같은 코드를 삽입

import express from "express";

export const videoRouter = express.Router();

export default videoRouter;

그리고 userRouter에도 export default userRouter; 작성

app.js에서 한가지 변수만 import하는 {userRouter} 를 지우고 새로운 라우터 2개를 import한다

import 했으니 app.use로 사용한다

app.use("/user", userRouter);
app.use("/video", videoRouter);

이와같은 경우는 /user/ID, /user/me, /user/login, /user/join 이런식으로 쓰일 수 있다.

user와 video를가지고 이것뿐만 아니라 글로벌 router를 가질것이다 예를들어 /join, /login ,/home

왜냐하면 여기 home URL은 없기 때문, home URL은 wetube/user가 아닌 wetube이 되어야한다.

즉, 누군가 이 URL("/")을 다뤄야함. 누군가 root("/") 로 접속하면 globalRouter를 찾는다.

글로벌라우터에선 /join, /search등 검색, 홈 이런것들을 다룬다.

import express from "express";

export const globalRouter = express.Router();

export default globalRouter;

↑↑↑↑위와같은 코드처럼 작성하는 방법이 유일하게 독점적으로 URL을 다루는 방법이다.

======================요약==============================

*MVC 패턴
 - Model(데이터, DB), View(데이터의 생김새, template) Controller(데이터를 찾는 함수)의 약자
 - 패턴 : 구조
 - 방법
   1. 데이터 모습에 맞게 URL(router)과 함수(Controller) 분리
     - app.js의 get 호출, handler 삭제
     - router.js -> userRouter.js 이름 변경
     - videoRouter.js 생성
     - routers 폴더 생성, router들 넣기
     - userRouter.js : get 호출 삭제
     - userRouter.js, videoRouter.js : 파일로 export(export default ~)
     - app.js
       - import userRouter & videoRouter
       - app.use("/user", userRouter); app.use("/video", videoRouter);
     - globalRouter.js 생성
       - export default globalRouter 하도록 코드 작성
       - app.js
         - app.use("/", globalRouter) 하도록 import하고 코드 작성

=================#2.9 MVC Pattern part One End ==============


/* get은 "/"와 같은 경로를 처리하기 위해 GET엔드 포인트를 정의하는것입니다. 
   use는 사용한다 미들웨어를 모든 루트에서 모든 요청안에서*/

routers폴더에 들어있는 global, user, video~~.js파일들에 뭔가 하기전에 (파일들안에 route를 적고싶지 않기 때문에)

routes.js 파일을 만들려고한다. 분할정복을위해(divide and conquer), route들을 다 한군데모아서 export해서 쓰기위해 따로만드는방법.

모든 route들을 routes.js에 작성하고, 다시한번더 객체화시켜서 export default처리 시킨다 (routes.js를 밖에서 쓰기위해.)

const EDIT_VIDEO = "/:id/edit"; 와같이 :id의 쓰임세는 videos/1/edit 이런식으로 쓰인다. id는 1,2,3... 동적이다.

:id를 정의하자면 express가 너무 똑똑해서, :id 이값은 변하는 값이구나를 알아차린다. 

:id가 아닌 그냥 id면 이를 텍스트로 인식한다

app.js에서 사용하기위해 import routes from "./routes";를 함. 그리고 아래코드와 같이 사용

app.use(routes.home, globalRouter);
app.use(routes.users, userRouter);
app.use(routes.videos, videoRouter);

앞 = 경로, 뒤 = 경로에 접근했을때. 실행되는것.

※routes.users = /users이고 /users로 접근했을때 userRouter로 접근한다 안에는 여러개의 get route들이 있는데
userRouter의 index는 users이다 users는 즉 /users이기 때문에. 전체적인 경로를 보자면 = locahost:4000/users/users가 되는것이다.

각각의 라우터들 (globalRouter.js, userRouter.js, videoRouter.js)에서 routes.js를 사용하려면 import해서 사용하면된다 

위와같은 3개의 라우터들은 routers라는 폴더에 들어가있으므로, import경로를 잡을때는 ../를써서 나와야한다 

./ = 현재 디렉토리, ../ = 한번나간상태의 디렉토리 routes를 찾으려면 routers 폴더를 나와야되기 때문에 ../로 경로지정

각라우터들에게 globalRouter.get, userRouter.get, videoRouter.get으로 res.send해서 응답처리까지한다.


★★★★★ ↓↓↓↓↓↓↓ ★★★★★

1. 모든 route들을 rotues.js에 const로 선언. ex) const EDIT_PROFILE = "/edit-profile";

2. 그리고 선언한 모든 route들을 const routes = {home: HOME, ~~~~ }로 객체 선언

3. export default routes로 다른 곳에서 routes.js에 관한 코드를 쓸수있게 export(수출)! 시킴.
-----------------------------------------------------------------------------------------------------
app.use(routes.home, globalRouter);
app.use(routes.users, userRouter);
app.use(routes.videos, videoRouter);

다음과같이 app.js에서 선언하고 각각 home, users, videos에 접근했을때 

각각 라우터들이 실행된다. 

실행될때 맨위에있는게 각 라우터들의 index경로이고, 라우터로 넘어가기전에 

routes.home, users, videos의 경로를 localhost:4000/blalbalba로 가지고 넘어간다.

home의 경우 "/", users = /users, videos = /videos

넘어가게 되면 정의된 get에 따라 res.send로 응답하여 화면에 text를 남기게됨 .

======================요약==============================

* 경로 변경
 - /user -> /users
 - /video -> /viders

* URL 만들기
 - 프로젝트 폴더에 routes.js 생성(어디서든 모든 URL을 불러 쓸 수 있게)
   - URL 관련 상수 선언(6분21초)
     - URL 문자열 안에 콜론 쓰면 express가 변수 처리함
   - route 객체 생성(7분12초)
 - app.js : import routes from "./routes.js";
   - app.use("/", ~) 에서 / &/user & /video 대신 routes.home &  routes.users & route.video로 변경
 - globalRouter.js
   - import routes from "../routes";
   - globalRouter.get(routes.home, (req, res) => res.send('Home'));
   - join, login, logout, search도 작성(9분29초)

=================#2.10 MVC Pattern part Two End ==============

controller를 사용할것이다. (req, res) => res.send("blabla") 같은 구조에서 자유로워지기 위해서.

controlllers폴더를 생성하고 video, user에 대한 controller를 만들거임.

대개 프로젝트에 있는 각 모델마다 컨트롤러를 만들게 된다.

wetube에서는 video, 비디오를 업로드할 users 그리고 routes를 한번 보자

routes에는 global, users, videos가 있다.

global에는 home, join, login, logout, search가 있는데

home 화면에는 비디오들이 전달될것이다.

join, login, logout은 user에 관한 것

search는 video 검색을 위한 주소.

정리해보면 video와 user에 관한 것들만 있다. 그래서 컨트롤러도 2개만 만든다

video(home,search), user(join,login,logout)

컨트롤러란 어떤 일이 어떻게 발생하는지에 관한 로직이다.

라우터들에 대한 모든 함수들이며, 함수들을 모두 컨트롤러에 담을것이다.

앞서 2개만든다했고 controllers폴더에 userController.js와 videoController.js를 만들어준다.

만들어진 컨트롤러들에 많은 함수들을 추가할 것이다.

추가할 함수 각각을 export한다 

videoController에는 video와 관련된 home, search함수를 추가하고, export(수출) 시킨다.

export const home = (req, res) => res.send("home");
export const search = (req, res) => res.send("search");

req, res를 함수의 인자로 입력받고, res.send("blabla")로 리턴함.

이렇게 export한이유는 이것을 사용하기위해서다. 각 router에서 import해서 사용한다.

여기선 기존에 적었던 우리가 알던 import처럼 작성하는 것이아니라,

예를들어 videoRouter.get(routes.videos, (req, res) => res.send("Videos")); 이렇게 정의되어있으면

path부분(routes.videos)은 놔두고 ,다음 부분을 지우고 관련 함수명을 쓰면 controllers/videoController에서

videos를 auto import할 수 있는 메뉴가 보인다. 그것을 누르면 알아서 import처리된다 처리된걸 확인하기 위해선

import했을때 알아서 import { videos } from "../controllers/videoController"; 라고 추가된다.

이기능은 export를 해야 할 수 있는 기능이다. 이렇게 auto import하여 controllers에서 함수를 가져와서 router에서 사용하면

videoRouter.get(routes.videos, videos);
videoRouter.get(routes.upload, upload);
videoRouter.get(routes.videoDetail, videoDetail);
videoRouter.get(routes.editVideo, editVideo);
videoRouter.get(routes.deleteVideo, deleteVideo);

이런식으로 코드가 작성된다.  

이렇게 바꾼이유는 router에 로직들을 놔두면 나중에 복잡해질 수 가 있다. 

사용자 정보를 알아보기 위해 데이터베이스를 조회할 수도 있고, 에러인지 아닌지 알려줘야 할 수도 있다.

그렇게 해야 할 일이 커지면 코드를 분리하는게 더 좋다.

/************ arrow function ************/

function test(){
	return true;
}

↑↑↑↑ 다음과 같은 함수를 정의했을때 true를 반환받고 싶다면 코드처럼 return을 적어줘야 한다.

arrow function에는 implicit return(암시적 리턴) 이라는 것이 있다.

                                                   test = () => true;

arrow function에서 무언가를 리턴하고 싶다면, ↑↑↑↑ 이렇게 작성하면된다. 이 코드는 true를 리턴한다.

test = () => {
	return true;
}

↑↑↑↑ 여기서 주의할것은 {} 중괄호를 적어주면 암시적 성격을 잃게 되어서 return을 적어야한다.


export const join = (req, res) => res.send("Join"); 이와같이 controller에 추가한 함수들을 보면

res.send("Join"); 이부분이 암시적으로 return되고 있는 코드다. 만약 여기에 return res.send("Join"); 으로 작성되어있으면 에러가 뜰것이다.

이유는 암시적으로 되어 있기 때문에 에러가 표시된다. 이러한 에러를 지우려면 {} 중괄호를 사용해야한다.

/************ arrow function ************/

지금 까지 진행된것은 

1. 서버

2. logger

3. routes

4. controller

MVC에서 C = controller 즉 함수들.

======================요약==============================
* Controller 만들기
 - 보통 프로젝트의 각 모델마다 컨트롤러 만듦 : 우리는 users, videos 컨트롤러(+ comments를 video controller에 넣을 것)
 - controller : 어떤 일이 어떻게 발생할지에 관한 로직(함수)
 - controllers 폴더 생성
   - videoController.js, userController.js 생성
     - export const  = ; 
     - router에서 import 해서 사용

=================#2.11 MVC Pattern part Three End ==============