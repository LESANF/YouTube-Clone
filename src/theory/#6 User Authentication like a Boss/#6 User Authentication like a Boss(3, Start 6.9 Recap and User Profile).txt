* 인증에 대한 정리 *

< local 방식 >

username + password를 이용한 방식 ( local 방식 )은 비교적 간단함.

username + password를 post 방식으로 전달하고, 우리가 설치해준 플러그인인 mongoose가 자동으로 체크를 해줘.

만약 password가 맞으면, passport에게 맞다고 알리고 그럼 passport는 쿠키를 생성하지.

< github 방식 >

깃헙 인증의 경우 조금 다르다.

먼저, 사용자는 깃헙 웹사이트로 이동하게 돼 (거기에서 권한 승인을 함)
-> globalRouter.get(routes.gitHub, githubLogin); / githubLogin이 인증을 해주는 함수다.

그 이후 깃헙 웹사이트는 우리에게 그 사용자의 정보를 보내주는데 /auth/github/callback 이라는 URL로 오게 돼.
-> routes.githubCallback

그렇게 되면, passport가 함수를 호출하는데 우리가 만들어준 githubLoginCallback이라는 함수가 실행돼.

이 함수는 모든 정보를 받을 거다. 사용자의 profile같은 거를. 이 정보로 email로 사용자 찾기, github ID로 사용자 찾기등을 할 수 있음.

githubLoginCallback 함수의 한 가지 조건은 callback(cb)함수를 return 해야한다. 

cb함수를 실행시켜야하고 그 함수에 error가 있는지 user가 있는지를 알려줘야함. 

error가 존재하면 cb(error), passport는 에러가 있구나. user는 없는 거구나 하고 끝내버릴거고 

user가 존재하면 cb(null, user), passport는 이 user를 취해서, 쿠키를 만들고 쿠키를 저장한다. 그리고 이 저장된 쿠키를 브라우저로 보내게된다.

error가 존재하면 passport.authenticate("github", { failureRedirect: "/login" }), 로그인으로 보내버릴거고 cb(null, user) user가 존재하면 githubLoginCallback을 처리할거다.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*camel case = 소문자로 시작하되 다음 단어부터는 첫글자를 대문자로 표기하는법 ex) findOne

이제 profile 페이지를 만들거다. 그전에 header를 잠시 수정하자.

현재 profile(User detail)을 누르면 현재 로그인한 사용자의 프로필로 가도록 되어있음. 잘되어있음.

일단 userDetail.pug를 작성해보자. 그리고 userController로와서 userDetail함수를 수정하자.

userDetail에서는, 특정 id를 가진 사용자를 찾아야만 한다. (http://localhost:4000/users/5e2bea2b6ebd4a498cf93183) 이것처럼. users/사용자id

사용자를 찾고, try catch를 써서 찾은 user를 보내고 해야하는데 사실 그 사용자는 로그인 되어있는 상태이다.

그러니까 /users/${id}보다 /users/me로 하는게 좋은 방법일거같다. 그러기위해서 me를 만들어야하고 새로운 route를 만들자. 

이름은 me. 나자신을 의미. 

이렇게 만드는 이유는 나는 사용자마다 똑같은 user template를 사용할텐데, 해당 id를 가진 사용자를 userDetail함수에서 찾도록 하는게 싫기 때문.

userController에 me라는 함수를만들고, userDetail이 하는일과 같은 일을 시킬거다. 

다른점은 userDetail에서는 사용자를 찾는 과정이 필요할 텐데, me에서는 user를 req.user로 전달할거다. 바로 지금 로그인한 사용자를 말이지.

기억해야한다. req.user는 현재 로그인 된 사용자다.

그래서, 이제 내 userDetail 페이지는 user라는 object를 전달받았다.

이제 userDetail.pug로가서 img안에 user.avatarUrl를 넣어주자. github의 이미지를 불러올 수 있음. req.user를 객체로 받았으니까.

block content
    .user-profile
        .user-profile__header
            img.avatar(src=user.avatarUrl)
            h4.profile__username=user.name


다음과같이 userDetail의 block에 img를 넣어줬다 객체에서 전달받은 avatarUrl을 통해. 그리고 이름도 받아옴.

만약 로그아웃하고 local방식으로 로그인하면 이미지가 안뜰거임. github의 프로필-아바타url을 받아온거기 때문!

그리고 header로 와서, routes.userDetail(user.id)로 가는 대신 routes.me로 가게하자. routes.me로 가도 문제가 없는 이유는

우리의 middlewares에는 locals 변수인 user에 req.user를 할당했다는걸 기억해야한다. 그래서 주소의 id를 바꿔도 (현재 로그인 한) 똑같은 사용자의 프로필이 뜰거다.

이건 middleware때문이다. user는 글로벌 변수로서, overriding하고 있기 때문임.

이것은 userDetail은 제 역할을 못하고 있다는걸 의미한다.

그래서 해당 id로 사용자를 찾고 만약 존재하지 않으면 존재하지 않는다고 띄워야함. 

그러니까 지금 글로벌 변수인 user를 실제 로그인한 user로 바꿔야 되는것이다. 

routes.me의 경로를 만들어주자 routes.js로 이동.

const ME = "/me"; 그리고 객체안에 me: ME 로 추가시켜줌. 이러면 경로는 users/me로 표시된다.

미들웨어를 조금 변경하자. res.locals.user를 res.locals.loggedUser로 변경해주자 훨씬 명확해졌음.

header에서도 if !user를 if !loggedUser로 변경.

me를 router에 추가시켜야함 localhost:4000/me니까 global에 넣어주자.

그전에 me함수는 이름이 너무짧으니 getMe로 변경 그리고 다시 global에 경로추가 globalRouter.get(routes.me, getMe);

me로 접근했을때 getMe가 실행되게.

이제 profile을 누르면 routes.me로 가게해놨고, routes.me로 접근하게되면 getMe 함수가 실행되므로 현재 사용자프로필 객체를 이용할 수 있게됨.

테스트하면 정상적으로 img와 name이뜸.

이제 http://localhost:4000/users/2131231231 이런식으로 userDetail에 접근하면 에러가뜸.

이제 user라는 이름의 글로벌 변수는 없으니까. img.avatar(src=user.avatarUrl) 같이 user라는 이름의 변수가 없음

전에는 user라는 변수가 우리의 controller부터 전달받은 것인지 아니면, middleware로 인한 것인지 구분이 안됐는데 이제는 그런점을 해결했다.

예를들면 locals로 req.user를 담고있는 loggedUser를 loggedUser.avatarUrl로 해서 테스트해보면 localhost:4000/users/12312312가 작동하게됨.

미들웨어로 부터 받은거니. 이제 이렇게 확실하게 구분할 수 있다. me는 user를 req.user 객체로 보내주고있으니까 !

================================#6.9 END=======================================

/users/234234 같이 무작위 id로 들어갔을때 에러화면이 뜨게하는건 좋지않다. 이걸 수정할거임.

userDetail 함수를 고쳐보자. try, catch구문을 써서 에러가 난 경우엔 home으로 redirect 시킬거임

그리고 params로 id를 받자. const { params: { id } } = req; id는 /users/11111과 같이 1111부분이 id에 해당된다

id인 이유는 우리가 routes.js에서 userDetail경로는 /:id로 지정해줬기 때문.

await를 쓰기위해 async를 쓰고 const user = await User.findById(id); 사용자를 id로 찾자.

그리고 userDetail을 render하면됨. user에는 우리가 방금 선언한 user를 넘겨주고.

이제 페이스북 소셜가입 부분을 해보자. 

passport의 페이스북 Strategy인 passport-facebook을 설치.

https://developers.facebook.com/ 로가서 app을 등록시켜야한다.

앱만들기후 -> 로그인설정 -> 웹을선택하고 -> http://localhost4000을 저장한다 (페이스북에게 우리의 사이트를 알리기위해)

설정 -> 기본설정으로 가면 App ID와 App Secret키를 알 수 있음.

내 ID와 Secret키를 .env에 변수로 넣어주자.

FB_ID="181493373219656"
FB_SECRET="a8cbe811d9b7f85fac4241fe717e74ba"

그리고 facebook 인증방식을 사용하면됨. 공식문서에 제공된 것을보면 github방식과 거의 동일하다.

이게 passport의 장점임. 모듈식으로 연결되어서 작동하고 일반적으로 strategy를 적용한 모양새가 서로 비슷하다.

passport-facebook을 설치했으니 passport.js로와서 import해주자. 이제 적용이 됐고, 사용을하면됨.

passport.use(new FacebookStrategy) 전과 비슷하게 몇가지 옵션(깃허브와 동일)이 필요함.

그리고 routes도 만들어줘야함. 페이스북에 접근할때와 다시 돌아오는 콜백URL.

선언한 경로들은 routes.js의 routes 객체에 넣어줌. 

깃허브와 마찬가지고 함수들을 만들어 줄것이다. (3가지 순서대로 인증->콜백->로그인)

3가지 함수를 만들었으면 globalRouter로 이동하여 경로도 추가해줌. 접근했을때, 인증을받고 콜백함수로 들어와 로그인연결까지의 경로

이제 테스트를 해보자. facebook으로 소셜가입을 진행하면 콜백함수에 머물러있음 지금은 console.log로 파라매터들을 보게 작성했기때문.

콘솔을 읽어보면 profile을 받았음. 하지만 이메일과 프로필사진은 받지못함.

================================#6.10 END=======================================

우리는 사용자의 이메일 정보를 얻지 못했다. 지금 그 이유는 페이스북이 까다롭기 때문.

developers.facebook으로와서 상태: 개발중 off를 on으로 바꾸자. 에러가뜰거임. 올바른 URL을 입력하라고 한다.

개인정보처리방침에 passport-facebook링크를줌 아무링크나 줘도됨. 다시 on으로 바꾸고 카테고리를 고르고 진행하면 라이브상태로간다.

앱 검수 -> 내권한및기능에서 email, default의 권한 기능을 승인해줌 ( 승인되어있음 더추가로 가능하지만 이것만으로 충분 )

브라우저로 돌아와 페이스북으로 다시 진행을하면 URL에러가 뜰거임 그 이유는 우리 localhost는 HTTPS가 아니고 HTTP라 그렇다

페이스북은 이런걸 좋아하지않음. HTTPS로 만들어야 로그인을 이어나갈 수 있지만, localhost로 HTTPS를 만드는방법은 쉽지않다.

그래서 우리는 localtunnel이라는 것을 사용한다.(강의에서) 
-> localtunnel이 안먹히는 관계로 ngrok를 설치함 -g로. 명령어는 ngrok http 4000 

package.json의 scripts안에 "tunnel": "ngrok http 4000" 추가. 터미널에서 npm run  tunnel로 실행.

https주소를 할당받아 passport.js의 new FacbookStrategy안에 callbackURL을 localhost에서 우리가 할당받은 https주소로 바꿔줌. (터널이 바뀔때마다 재할당받기때문에 서버를 끄지않을거임)

이런부분은 facebook만 해당함 페이스북은 HTTPS같은 걸로 아주 성가시게 하기 때문.

developers.facebook에서 facebook로그인 -> 설정으로 들어와서 유효한 OAuth 리디렉션 URI를 추가해줌 우리가 ngrok를 통해 할당받은 주소와 그주소의 콜백형태로 2개 추가.

테스트해보면 email과 프로필 사진을 받아왔음.

FacebookStrategy에 

profileFields: ["id", "displayName", "photos", "email"],
scope: ["public_profile", "email"]

다음과같이 정보를 요청하면됨.

이제 우리는 사용자 프로필을 얻게되었지만, ngrok를 껏다가 다시키면 새로운 주소를 할당받아야되고 그러면 다시 페이스북 로그인 - 설정으로들어와 OAtuh 주소를 수정해야함.

================================#6.11 END=======================================

정보를 받아왔으니 이제 facebookLoginCallback 함수로 user를 생성하자.

github와 동일하게 복사-붙여넣기함 githubId -> facebookId로 수정

프로필사진의 경우 페이스북은 graph API라고 하는것이 있는데 https://graph.facebook.com/2475906742537547/picture?type=large 이렇게 주소를 입력하면

해당 사진을 다운받을 수 있음 id는 사용자 id 이게 바로 프로필 사진의 URL이 되는거임.

github와 다른건 newUser의 avatar부분이 avatarUrl: `https://graph.facebook.com/${id}/picture?type=large` 이렇게 들어간다는거다.

이제 콜백함수부분을 작성해줬고 테스트해보면 페이스북으로 소셜가입 진행이 성공적으로 된다. profile로 들어가면 프로필사진과 이름역시 성공적으로 받아옴.

몽고디비에서 db.users.find({})를 해보면 3개의 아이디가 들어간게 보여짐 local, github, facebook 방식으로.

만약 로컬방식과 facebook의 email이 같으면 find해도 2개만 보일거임. 왜냐면 로컬방식에 facebookId : 120310293012 이런식으로 추가만 될거임.

newUser방식이아닌 그냥 user방식으로 save되기때문.

이렇게되면 프로필 사진이 안뜰텐데 user방식에  avatarUrl: `https://graph.facebook.com/${id}/picture?type=large`를 추가해주면

로컬에 페이스북이 추가되어도 프로필이 잘 뜰거임.

이제부터 https 터미널을끄고 로컬방식, 깃허브방식으로만 로그인할거임 https연결을 어떻게 얻을 수 있는지 한번 해봤다 또 서버를 껏다 키고하면 

주소를 다 수정해줘야해서 번거로움.

================================#6.12 END=======================================


