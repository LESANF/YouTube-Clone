< mongoDB >

몽고 DB 다운로드 

몽고디비는 NoSQL로 분류된다.

Community Server를 다운로드한다.

mongo를 입력해 들어가고 exit로 나올 수 있다.

< Mongo를 JS와 연결하는 방법 >

2가지가 있다.

하나는 몽고디비고 다른하나는 JS의 nodeJS다

몽고디비는 C++이나 다른걸로 만들어졌기 때문에 Adapter가 필요하다.

JavaScript에서 MongoDB와 연결하려면 Adapater를 통해야 한다.

JS코드를 작성하고 싶으면 몽고디비로부터 Instruction(명령, 지시)를 받아야 한다.

그리고 이건 Mongoose라는 친구가 해줄 것이다.

Mongoosejs = NodeJS를 위한 Object Modeling이다.
->npm install mongoose로 설치

한가지는 몽고디비, 다른한가지는 몽구스 그리고 Database를 가지고 이용하려면 둘 다 필요하다.

만들어놓은 db.js내용을 모두 지우고 진짜 MongoDB를 연결하자.

정리해보면 MongoDB는 Database이고, Mongoose는 Database와 연결하게 해주는거다.

몽고디비는 NoSQL Database이고, 특징은 규칙이 적고 엄청 유연해서 많은 부분을 수정할 수 있다.

반면, 어떤 사람들은 규칙이 너무 적고 모든 게 너무 크고 어떤 부분에서 실험적이여서 싫어한다.

좋아하는 사람, 회사도 있지만 아닌 쪽도 있다.

그리고 많은 Relationship(관계)이 필요없는 일반적인 프로젝트를 진행할 때, 몽고디비는 좋은 선택이다.

같은 서버에서 다양한 종류의 Database들을 사용할 수 있다는 것을 기억해라 ( 이 강의에선 한 가지만 사용할 거지만. )

============================ #3.0 END ==========================================

Database에 관련된 걸 하고, 어떤 유저에게나 영상을 보고, 검색하고 수정하고 삭제할 수 있게 할 것이다.

To Do list ->
1. Database 관련 작업
2. 누구나 사용할 수 있게 만들기 ( 영상 업로드, 시청 등 )

mongoose가 설치됐고, dotenv라는 걸 설치 한다.

db.js에 몽구스를 임폴트한다. import mongoose from "mongoose";

mongoose.connect()입력하면 connect가 우리한테 요청하는건 string으로 된 Database이다.

어디에 Database가 저장되어있는 지 알려주는것이다. Database의 URL을 적을 건데 그전에

mongod를 입력해서 port를 본다. 포트번호는 27017

string으로 넘겨줄 Database의 주소는 "mongodb://localhost:포트번호/Database이름' 이다.

mongoose.connect("mongodb://localhost:27017/Youtube"); 를 입력.

그리고 입력한 주소뒤에 

,{useNewUrlParser: true,
 useFindAndModify: false} 추가 해줌.

이렇게 적은 이유는, 새로운 버전의 Mongoose는 이런 식으로 Configuration(환경설정)을 보낼 수 있다.

이것들을 여기 적어놓는 이유는 이것들이 무슨 역할을 하는 지 알아서 그러는게 아니라 내가 몽고디비를 사용할 때마다.

몽구스가 이야기한다 useNewUrlParser: true, useFindAndModify: false 하라고, 왜냐면 새 버젼은 이런 것들을 가지고 가지 않을거라면서

이것들을 이렇게 셋팅해놓는다, 새 버전에서는 이것들이 기본적으로 되어있을거지만, 그래도 확실하게 해둔다. 이부분은 크게 신경 안써도 된다

그리고 난후 다음으로 할 것은 MongoDB와의 연결을 "db"로 저장한다. const db= mongoose.connection;

데이터베이스에 연결이 성공적으로 연결되거나 연결 오류가 발생하면 알림을 받아야합니다.

db.once("open", handleOpen);
-> 데이터베이스에 연결됐을때 handleOpen함수를 콜백 함수는 connected to DB를 console.log

db.on("error", handleError);
-> 에러발생했을떄 마찬가지로 콜백되는 부분.

videoController.js에 import ~~ db 삭제 이제 필요없음. (페이크정보는 지웠기때문.)
-> db.js를 임폴트하던걸 삭제했기때문에 데이터베이스가 끊겼음.

이제 import ~~ db는 database의 init으로 갈 것이다. init에 import "./db.js"; 경로 추가 -> 데이터베이스 연결됨.

< dotenv >

dotenv를 설치한 이유는 가끔 네가 어떤 부분을 숨겨놓고 싶를 수 있기 떄문.

지금은 mongodb://localhost:27017/Youtube (localhost에 설치된 몽고디비지만 다른 곳에 설치 되면 어떻게 될까)

네 코드에 있는 URL로 부터 유저 데이터를 보는 걸 원하지 않을 것이다.

만약 네가 Open-source 프로젝트를 하고 있을 경우, 그런데 네 Database를 숨겨두고 싶다.

mongodb://localhost:27017/Youtube이 파일을 Github에 올려놓으면 어디에 DB가 있는지 알게 될거다.

지금은 localhost라 괜찮다. 그러나 실제 Application으로 만들었을 때 문제가 생긴다. 이럴때 dotenv를 사용한다.


============================ #3.1 END ==========================================

< dotenv >

dotenv를 구성하기 위해 처음으로 해야 할건 .env파일 생성 이름은 environment나 secret도 가능하다.

.env파일 안에 MONGO_URL= 으로 변수선언하고 안에 database주소 넣음. 
->"mongodb://localhost:27017/Youtube"

그리고 PORT도 선언 
-> PORT=4000

db.js로가서 import해주자 
-> import dotenv from "dotenv";

그리고 dotenv.config()라는 함수로 .env 파일 안에 있는 정보를 불러올 수 있다.

process.env.MONGO_URL을 원래 주소있던 자리에 넣음.

git에 올릴떄 보이지않게 하기위해 gitignore에도 .env를 추가하고 init으로 가서 db.js같이 dotenv를 import하고

저장해둔 port를 process.env.PORT로 대체한다.

const PORT = process.env.PORT || 4000; env의 PORT로 연결하고 안되면 4000으로 하라는 뜻


============================ #3.2 END ==========================================

아래 두 가지 import 방식에 대한 차이.

import X from "./Y"

import "./Y"


첫 번째는 내가 ./Y에서 X를 가져올때, 나는 무언가에 X를 사용하고 싶을 때 사용

두 번째는 내가 ./Y를 가져온다면, 단지 파일을 가지고오는것. 

MongDB의 장점은 document를 줄여준다는 것이다. documnet는 JSON file, package.json 같은.

이것이 몽고디비가 완벽한 이유다.

하지만 몽고디비에 우리의 파일들이 어떤 식으로 생겨야 할 지 알려줘야 한다. 아무거나 생성 못함. (어느정도 타당성이 필요)

ex) 몽고디비야, 우리의 file들은 video라는 이름을 가질거야 (=video.js)

그리고 모든 video들은 string type을 가질것이다. 그 string의 이름은 title일거다.

video는 view를 가질거고 view는 number, 이런게 file의형태, 즉 model의 형태다.

---------------------------- 

이런것들은 models라는 폴더에 저장될것이다. 
-> models폴더생성 후, Video.js file 생성

models에선 대문자로 시작할거다, 그리고 Video.js에서 내 Video들의 형태를 정의할것.

import moongse from "mongoose"를 해주고 

해야 할 것 하나는 model 즉 document name이고 다른 하나는 schema, schema는 형태이다. model은 그냥 실제 data

--------------------------------------------------------
const VideoSchema = new mongoose.Schema({

   이안에 schema를 정의하자 이건 이렇고 저건 저렇고 ~ 이런식으로

});
--------------------------------------------------------

Video는 먼저 fileUrl을 가질건데 여기서 유의할건 Database에 영상(bytes)을 저장하지 않을것이다.

영상의 link(주소)를 저장할거임. 영상을 저장해버리면 너무커짐. 우리의 경우에 우리 서버에 Video를 저장하는거다.

fileUrl의 type은 String, required: error message, fileUrl 값이 없는 Video를 생성하려 한다면

required에 의해 error message를 받는다.

title도 가질것이고 type은 string required도 설정.

description : string, 설명은 꼭 필요하지 않으니 required는 뺌.

views의 type은 Number, default:0으로 설정. ( 처음 비디오를 올리면 조회수가 0이기 떄문 )

createdAt은 영상을 등록했을때 현재시간 Date.now함수로 가져옴. 

type은 Date, default : Date.now

이런 객체의 종류를 더 알고싶으면, https://mongoosejs.com/docs/guide.html 에서 schemas 쪽을 보면 다나와있다.

이제 스키마가 만들어졌고 model을 만들어야한다.

definition(정의)를 통해 실제 document를 만드는것, schema가 definition 같은 것이다.

model의 이름은 Video, Video model의 schema는 VideoSchema
-> const model = mongoose.model("Video", VideoSchema);

그리고 export default model 해줌. 여기까지하면 아직 Database는 model을 생성한걸 인식하지 못함

init.js로와서 import해줌. import "./models/Video";

============================ #3.3 END ==========================================

< Comment model >

Video와 똑같이 models에 파일생성 Comment.js

CommentSchema = new mongoose.Schema~~ 생성해주고, text와 createdAt 객체생성.

text는 타입 string과 입력안하면 에러를 반환하는 required, createdAt도 Video와 똑같이 타입 Date, 기본값은 현재시간받아오는 객체함수(Date.now)

이렇게 객체로 묶어서 두줄이상 쓰는것과 앞선 description : String과 같이 한 줄로 끝나는 것의 차이가 있다.

무언가 줄 option이 있으면 객체(object)로 만들어야한다. 그렇지 않으면 description과 같이 한 줄이면 충분하다. 

Video.js의 views를보면 default를 추가하거나, 다른것들처럼 required를 추가하는 건 configuration(구성) object이다.

그리고 이제 알아야하는건 data의 relationship(관계)에 대한것이다.

한쪽에서 video를 생성하고, 다른쪽에서 comment를 생성했을 때 둘을 어떻게 연관(relations)시킬까?  그게 문제다.

생성된 video와 video에 달리는 comment사이에 어떠한 관계가 있는데 이걸 어떻게 연관시킬까

- video가 comment ID의 array를 가지고 있는것.

- comment에 video의 ID를 저장하는 방법

어떤 게 어떤 것과 연결되어 있는 지 알아야한다 video(영상)에 comment(댓글)를 달 때.

Comment.js는 그대로 두고, Video.js에선 모든 comment ID가 담긴 array를 추가하는 것

모든 object들은 보통 ID를 가지고 있다. 우리의 이름처럼, 따라서 모든 comment의 정보를 저장하는 대신 

모든 video들이 comment id들을 가지고 있는 거지. 처음 video를 생성하면 comments는 0이다.

말그대로 comment가 없기 때문. 그리고 나서 누군가 댓글(comment)를 해당 video에 생성하면, 새로운 comment ID를

video안에 있는 comment의 list라는 곳에 저장하는 것이다. 그러면 comment는 1이되는 것이지.


-------------------------------------------------------------------------
방법1

Comment.js에 createdAt다음 video객체 추가 (이 comment는 이 video와 연결되어 있고)

video의 type=mongoose.Sechema.Types.ObjectId 작성.

어떤 object ID가 어디서 온건 지를 알려줘야겠지. 어느 model에서 온건지.
-> ref : "Video"

ref의 Video와 Video.js에서 model로 선언한 const model = mongoose.model("Video", VideoSchema);에서의 "Video"가 같아야한다.

video : {
type: mongoose.Sechema.Types.ObjectId,
ref: "Video"
}

는 ↓↓↓↓↓↓↓↓ 

video : 1 

기본적으로 Database에는 이런식으로 저장된다

그리고 mongoose에게 말한다 ID 1에 해당하는 Video를 가지고와라.
-> 그래서 ref를 사용하는 것이다.
                 ↓
실제로 우리는 Video의 ID를 원하기 때문.

좋아요를 저장하거나, 유저를 저장하거나 할 땐, 다른 ref를 사용할것이다.

여기까지가 첫번째 방법. 순서대로 정리해보면

comment를 생성하면 text와 createdAt를 생성하고 video ID는 1
----------------------------------------------------------------------------------

방법 2

이번에는 Object ID 들의 array를 생성해야 한다.

Object ID들을 Video.js에 배열로 넣을거기 때문.

이번엔 반대로 ref는 Comment이겠지. 

마찬가지로 createAt다음

 comments: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Comment"
    }
  ]

해당 코드 삽입. 배열로 저장하는것을 잊지말자.

--------------------------------------------------------------------------------

마지막으로 정리해보자면 이렇게 방법1, 2가 있다.

Comment ID들을 array로 video에 집어 넣을 것인가 or 혹은 Comment에 연결 된 Video ID를 줄 것인가.

ObjectId식으로 넣게되면 모든 Comment의 정보를 넣는게 아니라 Comment의 ID만 넣는것이다.

예를들어 [1,2,4,7] 이런 식으로 Video와 연결된 Comment들의 ID가 저장된다.

============================ #3.4 END ==========================================

위와같이 만들어둔 Model들을 어떻게 사용할 수 있을까 ?

videoController.js에서 보자. 누군가 home으로 가면 render의 videos(videos:videos)는 undefined일것이다.

search도 마찬가지. 이유는 videos is not defined

import Video from "../models/Video" 추가. 이건 단지 Database의 속성이 아니라 단지 model이다. 아예 다름.

element를 받는 통로일 뿐이지 element 자체는 아니다.

여기에 새로운 javascript요소인 async라는걸 추가한다.

async(비동기)는 너를 기다려주는 무언가이다. async의 위치는 함수 앞

만약 async를 사용하지 않고 const home 내부에 videos를 보라는 조건을 넣어두면, JS는 default(기본적)으로 너를 기다리게 프로그래밍되어있지 않다.

JS는 default로 Video를 살펴보기 시작하지만, 살펴보는거 끝나기를 기다리지 않는다.

다음으로 넘어가서 Video가 없는 페이지를 render하지, 아직 Video를 다 살펴보지 못했거든.

왜냐하면 JS는 한번에 많은 일을 할 수 있기때문이다. 이것은 엄청난 것이고 알아두어야 할 내용.

그래서 JS는 기다리지 않는다. 일단 Video를 살펴보고 있으니, 다음 render작업도 같이 할게 라고 받아들여진다.

우리는 JS가 우리를 기다리게 해야 한다. 그렇게하려면 async라는 keyword를 추가해야지.
-> async는 JS야 이 function의 어떤 부분은 꼭 기다려야 해! 라고 말하는 것과 같다.

이제 비동기식을 작성하자, await를사용 
-> const videos = await Video.find({}); 이렇게 하면 Database에 있는 모든 Video를 가져올거야.

이과정을 마치게되면 videos가 정의되었고 이는 render의 videos로 쓰인다. async를 쓰지않으면 에러가난다. await는 async없이 못쓴다.

이제 videos가 정의되었기 때문에 연결이되었지만, videos는 빈 array다. 생성된 video가 없기때문. 실제로 console.log(videos)를 찍으면 빈 배열임 []
이 async, await부분은 JS에서 엄청나게 매력적인 부분이다. 네 코드를 멋지게 만들어주기 때문. 

awiat부분이 끝나기 전까지는 render부분을 실행하지 않을것이란 걸 확실하게 보여준다.

그렇다고 해당 과정이 성공적으로 끝나야 하는것은 아니다. 그냥 끝날 때까지 기다리는거임. 성공하든 안하든

예를 들면 error가 생겨도 다음 render 부분을 실행한다. 왜냐면 끝났으니까. 성공적으로 끝난게 아니라 그냥 끝났으니 다음걸 실행했기 때문.

위와 같은 방법으로 짜는 것은 좋지않다. 발생할 수 있는 모든 error를 잡아야 함.

그래서 try catch를 사용할 것. 

try 는 우리가 해야 할 것들 그리고 만약 실패한다면 해당 error를 (catch)잡아낼거다. 그래야 우리가 무슨 error인 지 볼 수 있어서.

  try {
    const videos = await Video.find({});
    res.render("home", { pageTitle: "Home", videos });
  } catch (error) {
    console.log(error);
    res.render("home", { pageTitle: "Home", videos: [] });
  }

이런식으로 작성하는데 에러가 없을경우 try처럼 videos를 정상적으로 render할것이고.

console.log로 error를 출력하고

error가있으면 video는 없을것이고, videos가 빈배열 []인상태로 render 될것이다.

여기까지 두 가지를 배웠다.

첫 번째는 async와 await. awiat는 해당 과정이 끝날 때까지 기다리게 하는 거고 성공이나 실패여부가 중요한게 아니라 끝났다는게 중요하다.

두 번째는 try catch, error가 생기면 default로 우린 잡아내지 못한다. 이건 NodeJs의 문제이다. 엄청 중요한 error가 있고 우리가 잡아내지 못한다면

NodeJS는 불평할 것이고 모든게 망가질것이다.

에러에 대한 예를 들어보자 다음과 같은 코드로 함수를 다시작성.

const videos = await Video.find({});
throw Error("This is error from throw !");
res.render("home", { pageTitle: "Home", videos });

페이지를 새로고침하면 연결되지않는다. 그리고 터미널에 에러메시지가 찍힘.

UnhandledPromiseRejectionWarning: Error: This is error from throw ! 

내가 던져놓은 에러메시지가 콘솔에 출력. 해당에러의 세부내용을 보면

해당 error는 catch block이 없는 async function의 안에서 나온 겁니다. catch가 없어서 그런거임. 

그래서 우리는 error를 최선의 방법으로 잡아냐애한다. (try, catch를 사용한 코드처럼)

다음과 같은 코드에서는 home에 연결된다.

try {
    const videos = await Video.find({});
    throw Error("This is fake");
    res.render("home", { pageTitle: "Home", videos });
  } catch (error) {
    console.log(error);
    res.render("home", { pageTitle: "Home", videos: [] });
  }

기존 코드에 throw Error("This is fake"); 에러를 던져줌. 이게 연결되는 이유는 error가 NodeJS를 망가뜨리지 않기때문

앞의 코드는 catch를 사용하지않은 코드라서 연결안됨.

============================ #3.5 END ==========================================









