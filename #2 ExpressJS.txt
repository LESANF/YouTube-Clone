< 첫 서버를 만들어보자 >

서버는 컴퓨터다 우리의 맥북, 윈도우즈같은 인터넷에 연결된 컴퓨터다.

소프트웨어적인 서버는 인터넷에 연결된 한 덩어리의 코드다. 

일종의 네트워크에 연결된, URL에 응답하고 접속을 허락하는 일을 하는게 기본이다.

내가 이페이지를 요청하면 어딘가에 있는 서버에 저장된 웹사이트가 나에게 보내주는 것.

정리하면 물리적으로는 늘 켜져있는 컴퓨터라는 의미. 다른 의미로는 인터넷에 연결된 내접속 요청에

응답하는 컴퓨터이다. 중요한건 서버란 접속을 받아주는 무언가다.

===========================================

Express.js 는 프레임워크야. 그 의미는, 아주 많은 코드로 우리가 원하는 걸 쉽고 빠르게

해낼 수 있게 만들어둔 걸 말한다. 

예를 들어 node.js로 서버를 만드는거라면 수작업으로 좀 해줄게 있다.

우리 목표가 node.js로 서버를 만드는것이라면. (express를 사용할 수 있다)

몇 줄의 코드로 서버를 만들 수 있다는게 기본적으로 프레임코드야. 우리가 원하는걸 빠르게 만들 수 있다.

express의 경우 node.js에서 작동하는 프레임워크이다.

===========================================

ex) index.js 내용은 console.log("hi") , 터미널에서 node index.js를 하면 hi가 출력.

NPM = Node Package Manager

< vsc 내에서 NPM 설치방법 > 

Node.js 다운받을 때 NPM도 같이 설치됨.

npm으로 프로젝트를 시작하려면 npm이 정한 방식으로 시작해야한다.

(1) TERMINAL -> npm init -> package name 입력(이 경우 나의 웹사이트가 package이다.(enter) ->
버전확인 (enter) -> description: 입력 (enter) -> entry point, test command, git repository, keywords (enter) 해서 넘기고 ->
author : 내이름 (enter) -> (enter) -> Is this OK? 가나오면 y or yes 치면 package.json 생성됨.
(scripts지우기 ) 영상에선 지웠음.

Javascript에서 정보를 담는 방식일뿐. Json은 JavaScript에서 정보를 담는 방식이다.

===================================================

< express 설치 >

npm을 실행할 때는 꼭 프로젝트 폴더에 package.json이있는 폴더에서 실행해야한다. 

package.json이 없는 폴더에서 실행하면 package.json을 읽지 못해서 package.json을 또 다른곳에 설치해버린다.

위와같은 주의사항을 인지하고 설치한다.

-> npm install express

node_module이 다운로드 됐을거다. NPM을 통해 

그리고 package.json에 우리는 dependency를 가지게된다. 이게 우리 프로젝트가 생존하는 방식이다.

package.json을 가지고있는것은 아주 좋은 것이다. 친구와 협업을 할 때, node_modules 폴더를 다 건내줄 필요가 없다.

※  node_modules가 없다고 가정할 때, 터미널에 npm install이라고 치면 자동으로 dependecy를 찾아서 다운하게 된다.

git에 올려야 되기때문에 현재위치에서 git init을함.

github에 올리기전. node_modules의 양이엄청나기 때문에 ignore처리를 해줘야한다. github에는 내가 작성한 코드만 올리고싶기 때문이다.

< ignore 처리하는 방법 >

1. .gitignore 파일 생성.

2. google에 gitignore nodejs로 검색
-> https://github.com/github/gitignore/blob/master/Node.gitignore

3. 위내용을 복사해서 .gitignore에 붙여넣기.

4. package-lock.json 파일을 .gitignore에 추가로 적어주기 (package에 대한 보안과 관련되어있기때문)


=================================================

/* window에서 cmd가아닌 git bash를 통해 github에 push하는 법. */

https://git-scm.com/downloads 다운 

https://mishka.kr/2019/06/24/vscode-gitbash/  
-> VSC내부에서 터미널을 bash로 바꾸는 방법.

 $ git config --global user.email 
 $ git config --global user.name 

최초1회 등록. 

1. 저장할 때는 해당폴더에 들어가서 bash에 git init 작성시 준비완료.

2. git init이 완료되었으면, github으로 가서 repository를 만듦

3. github에 만들어진 repo안에 clone주소를 복사함. ( bash에선 붙여넣기가 shift + ins )

4. add remote origin https://~~~클론주소. (enter)

5. git add . (add와 . 사이 공백있음)

6. git commit -m "text"

7 git push origin master  

==================================================

< express 시작 >

https://expressjs.com/en/guide/routing.html    (expressJS 홈페이지)

메뉴에 Guide -> Routing 

-------------------------------------------------------------------------------------
var express = require('express')
var app = express()

// respond with "hello world" when a GET request is made to the homepage
app.get('/', function (req, res) {
  res.send('hello world')
})
--------------------------------------------------------------------------------------

var를 const로 바꿔서 작성. 왜냐하면 우리는 최신 버전의 nodeJS를 사용하고있기 때문.

const express = require('express') 이코드를 보자. 

기본적으로 require가 하는일은 node module을 어딘가에서 가져오는 것이다.

이경우에는 express라는 이름의 폴더를 내 파일들속에서 찾으려고 할 것이다.

만약 못 찾으면 그다음엔 node_module 안에서 찾으려고 한다.

node_module안에 express폴더가 있고 그안에 index.js가또 있다. 그안에는 여러 routes ,routers, application, request 코드들이 많다.

이런 것들이 nodeJS의 파워이고 모든게 작은  블럭단위로 구성되어 있다. 

설치한 다음에 require하거나 import하면 된다.

----------------------------------------------------------------------------------------

다시돌아와서

const express = require('express')
const app = express()


************************ 이부분은 나중에 다룬다 *****************
app.get('/', function (req, res) {       
  res.send('hello world')
})
*********************************************************************
expree를 불러온다음. 

const app으로 변수선언하고 express를 실행해서 담은것이다.

다음과 같은 코드 작성
->app.listen(4000) 

app에게 4000번포트를 들으라고 명령하는 것이다.
작성후 실행해본다. 실행은 node index.js를 터미널에 입력.

localhost:4000으로 접속하면 cannot GET / 라고 뜨는데 이경우에는 연결은 됐지만, 서버로부터 에러를 받은것이다.

root(/)에 아무것도 표시할게 없다는 뜻이다. 서버에 홈페이지로 보여줄게 없다는거지 최소한 서버는 있다는 것이다.

"scripts": { "start": "node index.js" }를 package.json에 넣어주면 npm start로 서버를 실행시킬 수 있다. ( 이런방식이 더 우아하다 )

이제 위와 같은 방법을 콜백형식으로 바꿔보려한다.

좀더 이쁘게 보이기위해 포트번호를 변수에 담아준다. ex) const PORT = 4000;

그리고 app.listen(PORT, handleListening); 으로 콜백처리한다.

function handleListening() {
  console.log(`Listening on: http://localhost:${PORT}`);
} 
-> 함수선언. 

서버의 실행은 npm start로. 이것이 express.js로 첫 서버를 갖게 된것이다. 

====================================================

< GET, POST >

니가 웹사이트에 가면 url을 적을텐데 이때 브라우저가 GET method를 실행하고

기본적으로 그렇게 브라우저가 페이지를 읽어온다. 

웹사이트에 로그인하면 POST를 통해 하게 된다. 

브라우저가 웹싸이트에 정보를 전달하는것이다. ( POST라고 불리는 method를 통해서 )

이것이 http의 작동 방식이다. GET request로는 정보를 전달할 수가 없다. 

POST request로는 정보를 전달할 수 있다. 

어떤 사람이 main URL로 접근(GET) 할 때, 서버가 응답하게 해보자.

app은 앞으로 많은것을 하게 될건데, 지금 할 건 get이다.

app.get("/", handleHome);   <- 누군가 이 URL(main URL)로 접근하면 handleHome함수가 호출될것이고.

function handleHome() {
  console.log("Hi from Home!!");
}

여기까지 하고 서버를 다시 시작하면 무한 로딩에 걸린다.

VSC 터미널의 콘솔을보면 Hi from Home!!라고 출력됐다.

문제는 GET request에 있다. 그에 대한 응답이 있어야 한다. 그래서 뭔가 응답을 하게 만들어야한다.

내가 만든 서버로 응답하거나, 에러, OK, HTTP메시지 라던가, 뭐가 됐던 응답을 해야한다.

일반적으로 서버가 하는 것 ( Express 홈페이지를 예로들어서 새로고침을 하면 서버가 하는일은 HTML로 응답하는것이다 )

나도 뭔가를 응답해야 하고, 이것은 express가 늘 하는 일이다. 

어떻게 작동하냐면 handleHome같은 함수들이 2가지를 호출한다. 하나는 request object 다른하나는 reponse object

예를들어 우리가 정보를 얻고자 하면, 누가 페이지를 요청했는지나, 어떤 종류의 데이터가 페이지로 전송됐는지

그럴 때 request object를 사용한다. 예를 들어 아이디와 패스워드를 전송한다면 ("/") 이 URL에 POST 방식으로 ex) app.post("/")

아이디랑 패스워드를 보낸다면, 서버에는 request object로 그 정보를 얻을 수 있다.

response object를 실행을 해볼건데, 다음과같이 코드를짠다.

function handleHome(req, res) {
  res.send("hi !");
}

res.send("hi !");는 뭔가를 응답한것이다. 여기서 requset는 사용하지않았지만, 

res.send를 사용했을때 어떻게 작동하는지 알아본것이다.


app.get("/profile", handleProfile);

function handleProfile(req, res) {
  res.send("this is profile");
}

다음과 같이 코드를 추가하고 서버를 다시시작한다.

localhost:4000/profile 로 이동할경우 handleProfile함수가 호출되고 

그함수는 res.send를 이용하여 this is profile이라고 응답한다. 

이런것이 서버처럼 잘 응답한다고 보여진다.

이서버가 웹싸이트 서버처럼 작동되기 위해서 우리가 해야 할 것은 

send하는 대신 완전한 html, css파일을 send해줘야 한다. <- 이내용을 이번파트에서 배울것이고

위와 같은 코드가 기본적으로 하는 기본 작동 방식이다.

서버를 생성하고, route(app.get)을 생성하고 그것에 응답(function)하는 방식이다
