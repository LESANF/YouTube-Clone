Pug는 view engine이다.

설치 - npm install pug

우리가 설정할 부분은 app.set부분이다.  

set은 app.set(name, value) 보는것과 같이 name과 value가 필요하다.

application의 설정을 하는 함수다. 설정할 수 있는 몇몇 값들이 있다.

우리는 view engine 설정을 바꿀것이고, view engine 설정의 기본값은 undefined다.

view engine 설정값을 pug로 바꿀것이다. app.set("view engine", "pug"); view engine의 이름을 pug라고 입력.

pug와 express에는 view 파일들의 위치에 관한 기본 설정이 있다. 만약 그 설정을 바꾸고 싶다면 'views' 설정을 바꾸면된다.

application의 화면이 담긴 디렉토리나 디렉토리의 배열을 입력하면된다.

html 파일을 저장해야하는 폴더의 기본값은 [ 프로젝트의 작업 디렉토리 + '/views' ]이다.

views폴더를 하나 만들고 그안에 파일을 하나 더만든다. 파일명은 home 확장자는 html대신 pug.  home.pug

home.pug안에서 코드를 작성해보자

hello! 라고 쓰고싶으면, p hello! 라고 작성한다. 이렇게 적어줘야 작동하는 pug코드이다.

pug는 템플릿 언어야. express의 view engine이지.

pug는 html파일들이 더 아름답게 보이도록 만들어줘.

html파일에선 <p>hello!</p>지만 pug 파일에서는 p hello! 라고 적으면 됨.

pug는 일반적인 html코드를 변환해준다. 이것이 템플릿이다.

Q. 그럼, 이제 이 템플릿을 웹사이트에서 보여주려면 어떻게 해야 할까 ? 컨트롤러에서 res.send로 home을 전송하는 것 대신에 말이야.
A. videoController로 가서 home을 전송하는 대신 res.render를 사용할거다. render 함수의 인자로 템플릿 파일의 이름을 입력하면 돼. 소문자로.
-> res.render("home");

이 함수가 views폴더에서 파일명이 home이고 확장자가 pug인 템플릿 파일을 찾은 후에 보여줄것이다.

npm start를하면 hello!로 나올것이고 브라우저에서 검사를하면 <p> 태그안에들어간 hello!로 나타날것이다.

controller에 있는 모든 res.send들을 res.render로 바꾸고 views폴더에 home.pug처럼 파일을 모두 만들어준다 함수에 대해.

userRouter와 videoRouter에서 users, videos 경로 지우고 마찬가지로 컨트롤러에서도 지우고 

나머지 파일들 모두 res.render로 바꾸고 home.pug처럼 모두 views에 pug형식으로 파일생성.

---------------------------------------------------------------------- #2.13 end --------------------------------------------------

HTML과 CSS만으로 작업할때는 똑같은 것을 반복하는 경우가 많기 때문에 별로 좋지 않다.

HTML과 CSS는 프로그래밍 언어가 아니고, 논리적인 작업들을 할 수 없다. 계속 복사-붙여넣기 하는건 힘들다.

pug 와 같은 것들로 작업을 하면, JavaScript의 위력을 사용할 수 있다 우리의 html을 만들때.

views 폴더 안에 layouts라는 이름의 새폴더 생성. 폴더명은 상관없음. 

layouts안에 main.pug 파일 생성. main에 HTML작성을 시작할거고 이 파일은 모든 페이지들의 토대가 되는 파일이 될거다.

모든 페이지들은 header, footer, HTML head 태그, css link를 필요로 한다. 

이 레이아웃(main)에 그 공통되는 코드들을 집어 넣으면 된다. 

1. doctype 쓰고 html 씀.

-> pug가 작동하는 방식은 HTML의 방식과 다른데, <> 방식을 사용하지않고 대신 들여쓰기를 한다. (탭을하거나 스페이스4칸 원하는거 아무거나 쓰면됨.)

탭 안쪽에 있는 코드라면, 무언가의 내부에 있는 코드라는 뜻이다. 

탭 바깥에 있는 코드라면, 윗줄 다음의 코드라는 뜻이지, 탭안 쪽이면 children이라는 뜻이다. 

shift + tab으로 탭 바깥쪽으로 꺼내올 수 있다.

-------↓ 작성된 아래의 코드 ----------( main의 layout코드 )

doctype html
html
    head
        title Youtube-Clone
    body
        main
            block content
        footer
            span &copy; Youtube

-------------------------------------------

Ⓒ = &copy;

우리가 기본적으로 head를 열었으면 닫아야하는데 여기선 닫는개념은 들여쓴 칸(탭을 한 번 누르거나, 스페이스 4칸을 누른것)을 다시 되돌아오면 닫힌다

레이아웃 파일에는 실제 내용들이 들어갈 자리가 있어야한다.

main 태그에 다른 모든 페이지들의 내용이 들어갈거다.

그 작업을 위해 block을 추가한다. block에는 name이 있고 여기선 content라고 이름을 붙인다.

이 작은 block에 화면의 내용들이 채워질것이다.

만약 header에 변화를 주고싶으면 모든 템플릿에 적용이 될것이다.

어떤때는 템플릿이 수백개 존재하는 경우도 있다. 그런 경우 footer를 바꾸고 싶다면 모든 파일을 다바꿔야겠지.

그렇게 작업하고 싶지 않아서 레이아웃을 만드는것이다.

이제 만들어진 main의 layout을 사용하는 방법을 알아보자.
-> home 파일로가서 p태그 이전에, 파일의 제일 윗부분에 extension(확장)을 하자.

이 레이아웃을 템플릿에서 확장하겠다는 뜻이다. 이 코드들도 사용하고, 거기에 추가적인 것을 더하겠다는 뜻이지.
-> extends layouts/main.pug

이제 main 레이아웃을 확장해서 사용하고 있다. (home화면이 레이아웃 코드를 복사-붙여넣기 한다는 뜻이다)

확장이되면, block content태그 안에 p태그를 넣는다 (home.pug 안에)
block content
    p hello! i'm home


요약하자면 main템플릿(레이아웃템플릿)을 만들었고 내용을 들어갈 곳을 만들었다 (block content)

그리고 그 템플릿을 사용하기위해 레이아웃파일을 extends했다. (extends layouts/main) 즉 레이아웃 전체 코드를 복사했다는 뜻이다.

전체를 복사했기 때문에, 그 위에 덮어쓰기(overwrite)할 수 있다.

브라우저를 새로고침했을때 logger를 보면 304와 200으로 나뉜다 304는 수정한게 없이 그냥 새로고침했을때, 200은 무언가를 수정하고 새로고침했을때.

만약에 footer가 없는 화면이라면, 이 레이아웃을 extends하면 안된다. 하지만 이프로젝트의 모든 화면에는 footer가 있고 header도 있다 그러니 상관없다.

==================================================
* Pug : HTML CSS를 논리적으로 작업 가능 & <>대신 들여쓰기 사용
 - views 폴더에 layouts 폴더 생성
   - layout 파일 생성
     - main.pug : 공통으로 적용될 html, head, header, footer, css link 등의 코드
       - block : 다른 레이아웃이 들어갈 자리
         - 레이아웃 사용 방법 : block에 들어갈 레이아웃 파일 제일 위에 extension(기본 템플릿을 확장하겠다)
           - extends layouts/main.pug
           - block content에 들여쓰기 해서 내용 작성
================#2.14 end======================

< partials (부분적인) >

partials는 페이지의 일부분이다. 조직적인 목적으로만 만들어진다.

views안에 partials 폴더생성 후 footer.pug와 header.pug 생성

footer 파일에는 footer태그를 추가하고 이안에는 아이콘이 들어갈거다 (폰트어썸사용)

태그에 클래스를 추가할때는 바로 붙여서 footer.footer로 클래스명을 줄 수 있고

pug에서는 div태그에 클래스를 줄꺼면 div.div가아니라 .div만 주고 앞에 div를 생략해도 된다.

<i class="fab fa-youtube"></i> 폰트어썸 아이콘이다 이렇게해도 인식되지만 pug로 바꾸면
-> i.fab.fa-youtube로 바꿀 수 있다.

다음 span을 추가하고 클래스명은 .footer__text다 => span.footer__text

내용은 Youtube 2019 &copy; 
-> Youtube는 텍스트 &copy는 카피특수문자, 2019는 자동으로 바뀌게 Data에 객체를 받아온다
js를 쓰고싶다면 #{}사이에 넣으면된다. new Date().getFullYear() <- 년도 받아오는 객체
----------------------
#{} is the pug way
${} is the ES6 way
----------------------
그리고 footer를 main layout에 붙인다. 그리고 main의 footer에 include추가하고 footer.pug의 위치를 적어줌.
-> include ../partials/footer

main의 기준에서 ../ (현재디렉토리 layouts나옴) -> 나오면 views에있는상태고 partials로 폴더들어감 거기엔 footer와 header.pug가있음.

이것이 컴포넌트(모듈을 조립하는기술)를 분리하는 방식이고 웹사이트의 분리하고 싶은 부분을 분리하는 방법이다.

이게 더 조직적인 방식이다. FOOTER와 HEADER는 각각 한 곳에만 있어서 더 조직화 되었고, 이렇게 여기에(main) 다 모아두는 게 더 괜찮아 보인다.

** 프로그래밍은 분할 정복이다( 디바이드 앤 컨커 ) **

footer와 마찬가지로 header도 만듬 

header를 만들고 클래스는 header로 주고 

2개의 div를만듬 div는 생략가능하니 .header__column 클래스만 적음 2개

첫번째 div에는 유튭아이콘, 다음 column에는 ul li를 만들고 li에는 a(href="#")

li에는 Logged out header를 추가한다. 만약 로그아웃된 상태라면 Join과 Login이 보일것이고,

로그인 된 상태라면, logout, Upload Video, Profile이 헤더에 보여야한다.

우리가 추가한 라우트들이 여기(pug 파일)로 연결되면 좋겠다. 만들어둔 routes.js에 접근이 되게하면 좋을것이다.

a(href="#")에 a(href="/join")처럼 적기 않기 위해서. 한 곳에서만 정보를 보관하는 방법이 더 나은 코드를 만들어주는 원칙이다.

많은 곳에 영향을 주는 하나를 바꾼다면, 그 하나만 바꿔주면 많은 것들이 바뀌기 때문.

여기까지 했으면 모든 템플릿에 header와 footer가 있는상태 ! 

main.pug의 main안에 block 적지 않으면, 어떠한 템플릿도 작동하지 않는다. (main.pug를 모든 템플릿에 뿌리고있기때문.)

layout에 block을 추가해야, 페이지의 내용들이 채워진다.

============================= #2.15 Partials End ===================

지금부터 할것은.

템플릿에 정보를 추가하는 방법. 컨트롤러에 있는 정보를 템플릿에 추가하는 법.

한 템플릿에만 추가하거나, 전체 템플릿에 추가할 수 있다.

( 템플릿 전체에 추가하는 방법 )

헤더가 라우트 객체(routes.js)에 접근하도록 하고 싶다.
-> 미들웨어를 사용해야함. 

미들웨어는 레이어(시스템을 이루는 층) 같은것이고. 위에서 밑으로 한단계씩 내려간다.

처음에, view engine을 pug로 설정했고. cookie를 파싱하고, body에 담긴 정보를 파싱한다.

그다음에 helmet, morgan이 있고, 그 후에 컨트롤러와 라우트들이 있다.
-> helmet을 맨위로. 수정

locals 미들웨어 생성, local변수를 global 변수로 사용하도록 만들어주는 거라고 생각하면 된다

local 기능을 통해 변수에 접근할 수 있다.

apu.use안에 함수를하나 만들것이고 함수 인자는 req, res, next로한다.

app.use((res, req, next) => {} ) 이 코드는 es6 errow function 으로 작성한것이고

app.user(function(res, req, next){ })와 같다. 이방법 외에도 localsMiddleware라는 함수를 따로 만드는 방법이있다.

app.use(localsMiddleware) 이런식으로. localsMiddleware라는 새파일을 따로만든다 (코드를 분리하기 위해)

만들어진 파일안에 코드를 작성. 
-> export function localMiddleware(req, res, next) {}

export해야 다른데서 이코드를 사용할 수 있음. 함수 내용에 locals를 추가할 것이고, 

locals가 추가되면 이제 그것들을 템플릿, 컨트롤러, 어디에서든 쓸 수 있다.

그리고 app.js에서 app.use(localsMiddleware)의 위치가 중요한데, 만약 globalRouter, userRouter아래에 두게되면

그 2개의 라우터들은 locals에 접근을 못한다. 그러므로 라우터들 위에 두는것이며, 어디에 위치시켜야 할지 잘 알아야한다.

app.js에서 import한다 방법은 auto로 잡히게.

import 되어있는 것들은 항상 알파벳 순으로되어있는게 좋다.

locals는 로컬 변수 응답을 포함하는 객체입니다. 이 프로퍼티는 유용한 정보를 내보내는 데에 유용합니다.

res.locas이후에 아무거나 설정하면 된다. res.locals.siteName = "Youtube" 이런식으로.

이렇게 export한걸 어디에서 사용할것이냐 -> main.pug에 와서 title에 #{siteName} 이런식으로 사용한다.

locals에 있는 건 템플릿에 변수명 처럼 존재함. footer 또한 #{siteName} 이런식으로 바꿀 수 있다.

다시 main에 title로 와서  | #{siteName}설정. | 기준으로 나중에 text를 넣어줄거다.

이제 다른 locals도 추가해보자, routes에 routes.js 객체를 추가할거다. 이파일을 임폴트하자.
->   res.locals.routes = routes;   routes는 auto import시킨다.

이제 partials/header에 가서 a안에 "#"대신에 routes를 쓸 수 있다. a(href=routes.join) 이런식으로

그리고 미들웨어가 next에 req를 전달해야 한다. next()를 적어줄것.

app.js를 보면 미들웨어가 커넥션과 라우트들 사이에있으니까 enxt()라고 하면됨.

6분부터다시보기







