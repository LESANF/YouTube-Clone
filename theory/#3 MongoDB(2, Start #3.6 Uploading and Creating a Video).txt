우선 누군가 우리 videoController에서 Upload하려 할 때 무슨 일이 일어나야 지 알아야한다.

postUpload 함수에   console.log(file, title, description); 을추가하고

서버에서 직접 파일을 넣고 form을 작성하여 데이터를 보내본다.

나같은경우 tomcat.png파일을 첨부하고 제목은 cat, 설명은 This is cat이라고 작성해서 데이터를 보냈다.

콘솔에선 tomcat.png cat This is cat 로 찍혀있음.

하지만 내가원한건 이런 tomcat.png파일이 아니라 위치(location)이다. 어떤 서버에 있는 location

내 서버일 수도 있고, 아마존 서버일 수도 있다.

Video.js에 작성해둔 스키마를보면알겠지만 나는 file자체를 저장하는게 아니라 file의 location을 저장하는것이다.

방금 test를 할때는 이미지파일을 넣었다. 하지만 우리는 동영상을 업로드하는거다. 동영상이외의 파일들은 올라가면안된다

Video가 아닌 file이 들어오지 않게 보호하자. 

upload.pug로 이동. input type="file"로 가서 accept속성 추가.

옵션은 아래와같음.
오디오 - audio/*
비디오 - video/*
이미지 - image/*

accept="video/*" 추가하고 확인해보면 video외 파일들은 활성화가 안됨.

테스트할 mp4파일 동영상하나를 준비.

아직 업로드할 수 없음. file을 Upload하고 URL을 반환하는 middleware가 있어야하기 때문.

이 middleware는 multar라고 한다. ( https://github.com/expressjs/multer/blob/master/doc/README-ko.md )

multer의 function을 이용하여 집어넣으면 middleware가 file의 URL을 반환할거다.

설치를하자 npm install multer를하고 우리의 Upload Form의 enctype에 mulipart/form-data를 추가해줘야함.

친절하게 메뉴얼에도 적혀있음. Don't forget the enctype="multipart/form-data" in your form. 

우리는 file을 보내기때문에 form의 encoding이 달라야한다.

이제 middleware로가서 multer로 미들웨어를 만들어보자. 구성은 매우 간단함.

multer를 import하고, const multerVideo = multer({dest: "vidoes/"})

dest = destination 목적지라는뜻. dest속성으로 지정해둔 경로에 저장됨.

다른데서 사용해야하기 때문에 export 시킨다. multer의 속성중 single이 있는데 

single은 오직 하나의 파일만 Upload할 수 있는 걸 의미한다. 싱글에 들어가는 name part는 ("")

upload.png의 form안에있는 type=file인 input의 name이다. (videoFile) 우리가 원하는 파일이 들어간 HTML field의 이름 부분이 있다.

export할때 다시 보기좋게 uploadVideo에 담아서 내보냄.
-> export const uploadVideo = multerVideo.single("videoFile");

middleware를 만들었으니 사용을해야함. videoRouter로 이동

videoRouter.post(routes.upload,uploadVideo ,postUpload); 다음과같이 uploadvideo를 추가하자 
-> uploadVideo넣으면 알아서 auto import되는데 혹시나해서 남겨봄. import { uploadVideo } from "../middlewares"; 

여기까지 모든게 완벽하게 됐다면, 우리가 file을 Upload하면 server에 있는 folder(video/)에 Upload video/는 multer의 dest: 속성에서 정함

postUpload라는 function은 해당 file에 접근할것이다(videoController에있는 postUpload). file방식이아닌 URL 방식으로

그전에 videoController에서 postUpload 함수를 잠시 살펴보자, form으로 부터 넘겨받은 정보를 읽어보자 

es6문법으로 정의한걸 살펴보면 const { body : {file, title, description} } = req; 인데

이건 file, title, description을 정의한것이지 body를 정의한게아니다. 정확하게는 body는 req.body이고 

file, title, descripiton은 body안에 있는 요소들이다. 그래서 body전체를 보고싶을때는 const { body } = req로 정의해야 consol.log(body)로 볼 수 있다.

이제 파일, 제목, 설명을 다넣고 업로드를 눌러 form 데이터를 postUpload함수로 넘겨준 내용은

{ file : '파일명.mp4',
  title : '파일명',
  description : '설명' }

이렇게 console에 찍히는데 이게 body이다. 그리고 video를 생성했으니 multer에 자동으로 파일이만들어지고 dest경로로 잡아둔 videos폴더에 저장됨.

하지만 위의 결과는 우리가 원한결과가 아니다. 우리는 body를 request하면 안됐고, file을 request해야한다.

const { body, file } = req로 다시 정의해주고 console.log(file)을 한다. 다시 업로드.

다시 콘솔을 확인하면 originname, encodeing, mimetype, destination, filename, path가 나오는데 여기서 우리가 필요한건 path이다.

기존의 body: { file, title, description }에서 file제거하자 우리는 이제 form에서 file을 받아올 필요가없다. 넘어온 path경로를 이용할것.

const { body :{title, description}, file : {path} } =req; 로 새롭게 file을 선언해서 path를 담아준다.

async, await를 사용하자. 비디오를 다만들고 redirect로 돌아가야된다. 비디오 만드는걸 기다려야함.

(req, res) 함수앞에 async추가, 그리고 await 비동기구문을 새로작성함.

const newVideo = await Video.create({
    fileUrl: path,
    title,
    description
})

생성된 newVideo의 log
->
{
  views: 0,
  comments: [],
  _id: 5e174b158d39ed370c9b651d,
  fileUrl: 'videos\\ae8127516d319f69a9d28488c26c0abd',
  title: 'test',
  description: 'testetsetse',
  createdAt: 2020-01-09T15:47:33.890Z,
  __v: 0
}

newVideo가 정의되고 redirect로 응답한다. videoDetail()함수의 매개변수로 newVideo.id를 넘겨줌 
-> 이 id는 mongoose가아닌 mongoDB에서 자동으로 생성되는 id

비디오가 생성되고 videoDetail로 들어가면 생성된 id주소값이 URL에 찍혀나옴.

======================#3.6 END============================

이제 비디오를 업로드 할 수 있지만, home으로 가면, video들이 나타나지 않음. 왜냐하면 link가 망가졌기 때문.

videos 폴더를 삭제하고, middleware에서 video/ 가아닌 uploads/videos/에 업로드하게 수정할 것이다.
->dest : "uploads/videos/"로 수정.

여기서 주의할점. /uploads/videos로 쓰면안됨. 이렇게 써버리면 해당 위치가 네 project file 안에 있는 directory라고 생각하기 때문.

/uploads/videos로 쓰면 내 컴퓨터의 root에 upload를 만들것이다.

그 다음 해결할 문제는 MongoDB model이 한 document를 Database에 저장했고, 이 Document는 잘못된 URL을 가지고 있다.

우리는 아직 Video를 수정하는 방법을 가지고 있지 않다. MongoDB에서 어떻게 다룰 수 있는지 보자.

--------------------------------------
터미널에서 mongo 시작 

1. show dbs -> Database의 이름을 알 수 있음. (help를 쳐서 명령어를 볼 수 있다.)

2. use Youtube -> show collections를 입력하면 우리가만든 videos가 나옴. collections는 model같은거다.

3.db.videos.remove({})로 안에 내용을 삭제할 수 있음.
--------------------------------------

이제 upload해보면 uploads/videos들어가지만 영상 재생은 되지않을거임. 해당 주소가 망가졌기 때문.

express는 모든것에 대한 Route가 있다. Uploads를 위한 기본적인 route가 필요하다.

app.js에 추가한다. app.use("/uploads", express.static("uploads")); 

uploads에 접근했을때, express.static을 사용한다. 이건 directorty에서 file을 보내주는 middleware이다.

주어진 directory에서 file을 전달하는 새로운 middleware function, 이경우엔 어떤 종류의 controller나 view같은 건 확인하지 않는다.

그냥 파일만 확인하는거다. 사용될 directory는 uploads, 이제 "/uploads"로 가면 uploads라는 directory안으로 들어간다는 것이다.

이제 다시 확인해보면 Video를 다운 받아서 import 시켰다. 정상적으로 영상이 나온다.

user avatar도 이것과 같은 방식으로 다루면 된다. 이렇게 app.use로 static해주는 형식은 좋은 예시가 아니다.

이것처럼 user에 해당하는 file을 내 server에 저장하는 것. 이건 좋은 연습이 아니다.

server의 코드는 영원한것처럼 보이면 안된다. 보통 웹사이트에서 server를 만들고 새로운 version이 나오면 새로운 서버로 redirect만 시킨다.

옛날 서버와는 작별인사를 한다. 주로 이런식으로 하고 이 프로젝트도 그렇게 할것이다. 

user file들을 우리의 website에 저장해야하는걸 의미하는건 아니다. user와 같은 생성된 content는 server와 분리되어야 한다.

요약하잠면 이렇게 file들을 다루는건 문제가 많다. 한개의 서버에 다루는 방법은 !

지금은 작동되는 결과에 만족하기 위해 사용했을뿐이다. server에서 data를 가져왔다.

github에 내 동영상이 올라가는걸 원하지 않으니 ignore에 uploads추가한다.

그리고 home.pug에 videoFile : item.videoFile에서 item.fileUrl로 수정.

======================#3.7 END=============================