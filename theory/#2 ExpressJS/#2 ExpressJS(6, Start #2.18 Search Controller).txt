※ https://devbox.tistory.com/entry/HTML5-a-%ED%83%9C%EA%B7%B8 
-> form에 관한 기본개념

partials/header 파일을 조금 수정해야함. 
-> .header__column하나더 추가 (div는 생략한거임. pug라서)

안에는 form을 추가하고 action은 routes.search로, method는 get으로(url에 있는 값들을 보고 싶어서)

routes.search는 routes.js파일의 routes명으로 객체화시킨 search : SEARCH 이다. 즉 SEARCH

SEARCH는 routes.js에서 const SEARCH = "/search"로 선언해놨음.

form안의 input 타입은 text, placeholder="blablabla", name="term"으로 설정. 

input에 값을넣고 enter를 누르면 name(서버로 전달되는 이름)이 넘어감.

search페이지에 표시할 정보들이 주어졌고, 이제 search페이지를 수정한다.

이코드(기존에 있던 p hello) 대신에 클래스명인 search__header인 div를 추가.

div안에는 h3태그와 Searching for #{searchingBy}를 적어둠. 이 변수에는 term값을 넣어줄거임.

form에서 보내는 주소는 search이므로. videoController에 온다.

search로 form을 보냈다면. 그 데이터를 갖고있는 req에 접근을 해야한다. 

만약 input에 nico라고 값을 넘겼으면 const searchingBy = req.query.term으로(name="term")

const searchingBy = req.query.term을 es6버전으로 쓰면 아래의 코드와같다.
const {query}의 뜻은 req.query를 뜻한다.

  const {
    query: { term: searchingBy }
  } = req;

= req 는 의미한다. "from 'req'" 

term=nico라고 값을 가지고 있을것이다. 이것이 요청받은 데이터에서 term값을 뽑은것이고

요청을 받았으면 응답을 해야한다. 그것이 res.render이고 앞서 pageTitle과 같이 객체를 추가해준다.

우리가 앞서 정한 변수명은 searchingBy이고. searchingBy는 searchingBy이다.
-> 앞의 searchingBy는 객체명이고. 뒤의 searchingBy는 앞에서 정의한 term값을 가진 searchingBy이다

searchingBy : searchingBy는 문법상 간결하게 searchingBy로 줄일 수 있다.

---- 요약 ----

header.pug에 form을 작성하고 그안에 input을 추가했고 action은 routes.search로 method는 get형식으로.

/search에 접근했을땐 함수가 실행될것이고.( 컨트롤러 C )

app.js에있는 app.use(routes.home, globalRouter)를 통해 (routes.home밑으로 search가 있기때문.)

globalRouter로 들어오게되고 여기서 다시 routes.search로 접근했을때, search가 실행되고 이것은

videoController에 있는 search다. 여기서 다시 함수가 실행 form에서 보내는 값을 요청받았고 응답(respone)해야함.

일단 form으로부터 받은 term값을 찾아내고, 그것을 res.render응답을통해 객체로 넣어 응답한다.

응답되는것은 "search" 템플릿과 pageTitle, searchingBy가 들어있는 객체. search.pug에 #{searchingBy}를 통해 화면에 표시된다.

pageTitle도 복습하자면. main에 #{pageTitle}이 있고. 특정 템플릿마다 별도로 바뀌게해놓음. 해당 사이트를 접속하면 

응답으로 pageTitle에 들어있는 값이 다다름. 

컨트롤러가 query에 접근하려면, method가 get이어야한다. get method가 url에 정보를 추가하기 때문 

post method면 주소에 표시되지않음. 

===================== End #2.18 =======================

시작하기 전에, 계획을 세워본다. 

Vsc내의 readme를이용해 마크다운으로 작성하자. routes.js에 들어있는 경로를 통해 작성할 페이지를 정리한다

Global에서 logout은 페이지가 아니다 그리고 users에서 USERS는 페이지가아님 나머지는 페이지

video에서 videos와 deleteVideo는 페이지가아님.

할 목록을 마크다운으로 readme에 정리해뒀고, 이제 home부터 시작해보자.

< home >

Block content 부분에 .videos 클래스를추가 (div는 생략된거임)

H1 태그안에 video라고 적어둠. 일단은 가짜 데이터베이스로 작업할거기 때문. 

실제로 비디오를 보여주기 전에 템플릿을 테스트할 수 있다. (실제 몽고db 데이터베이스에 들어가기전에)

< Log In >

.form__container 추가 form을 추가하고 action은 routes.login, method는 post로 get으로하면 url에 정보가 보이게됨

form 안에 input들을 넣어줌 아래와 같이 코드를 작성

input(type="email", placeholder="Email", name="email")
input(type="password", placeholder="Password", name="password")
input(type="submit", value="Log In")   

나중에 소셜로그인 버튼도 추가해야됨 (페이스북, 깃헙)

< Join >

Join도 login과 다를게없다. 회원가입이기 때문에 이름을 적을 input, 비밀번호를 확인할 password input, value가 join now인 submit input이 필요.

지금 log In을 해도 에러가 뜰것이다. POST /login에 대한 컨트롤러가 없기때문.

지금은 라우터에서 get요청을 보냈을 때에 해당하는 컨트롤러만 있기 때문이다. (이와 관련해선 다음 강의영상에서 배움)

이제 partial을 만들것이다. 버튼 하나는 깃헙, 다른하나는 페이스북으로 로그인 하기위해서 이런버튼은 계속 만들어 낼 수 있다.

이런 소셜로그인 버튼들을 Join화면과 Login화면에 모두 띄우고 싶다. partials폴더에 socialLogin.pug 생성.

.social-login div를만들고

그 안에 2개의 버튼을만듬. 클래스명은 각각 .social-login--github, .social-login--Facebook

버튼안에 span으로 감싸고 icon을 넣음 그리고 Continue with Github 텍스트입력, 여기서 주의할점

| Continue with Github 이런식으로 | 를 추가해야함. 이렇게 안하면 에러가뜬다 맨앞 Continue를 태그로 인식하기 떄문이다.

이런식으로 깃헙, 페이스북 소셜로그인 버튼 2개를 만들고. join.pug, login.pug에 form다음 추가해준다

partials를 추가하는 방법은 include 파일의위치. -> 우리의 프로젝트경우 include partials/socialLogin.pug 이렇게 추가.

===================== End #2.19 =======================

join과 login을 했다. User Detail은 form 페이지가 아니다.

edit Profile은 form페이지이지이다 ( 프로필을 수정해서 다시 값을 보내야하기 때문 )
->edit profile 할차례

join에서 사용한 것과 같은 클래스 그대로 쓰자. (.form__container)

form을 추가해주고 action 경로는 routes.editProfile 그리고 전송방법 method는post형식.

form안에 input 타입은 file로 (아바타 편집을 위한 것.)


========================== -와 __의 차이 ========================
앞서 .form__container라는 클래스명을썻는데 모두수정한다(login, join, editProfile.pug 페이지에서)
-> .form-container로 수정. 

word-word = 두단어 일때 - 를쓰고

form__container처럼 __를 쓰려면 container가 form안에 있어야한다. 하지만 우리는 그런게아니다 2단어이기때문에 -로 모두수정.
============================================================

이어서 type이 file인 input과 그 input의 id="avatar" 그리고 name="avatar" 지정.

그리고 input(type="file"~~~) 전에 label을 추가한다.

label(for="avatar") Avatar 

라벨은 폼의 양식에 이름 붙이는 태그이고 주요속성은 for이다. 

label의 for의 값과 양식의 id의 값이 같으면 연결된다. 참고로 input file의 id는 avatar, label과 같음.

label을 클릭하면, 연결된 양식에 입력할 수 있도록 하거나 체크를 하거나 체크를 해제합니다. ( 우리의 경우 누를시 파일선택창이뜸 )

그리고 input type="text" name~~ 와 input type="email" ~~~ 추가

마지막으로 전송할 input type="submit", value="Update Profile" ( 누를시 action으로 form 태그안에 입력된값이 넘어감. value는 보이는 이름 )

============================= error 1====================================
이렇게 작성까지 마치고 edit-profile로 이동하려하면 되지않는다. ( 이전 작성한 코드에 문제가 있기때문. )
-> /users/edit-profile이 정상적이지만, 라우터가 edit-profile이 :id에 해당한다고 인식함. 

userRouter.get(routes.userDetail, userDetail);
userRouter.get(routes.editProfile, editProfile);
userRouter.get(routes.changePassword, changePassword);

userDetail = /:id 가 맨위에 있어서 /:id가 밑의 editProfile과 changePassword를 포함하고있기때문에 

/users/edit-profile에 접속하면 users/:id로 라우터가 인식해서 페이지가 뜨지않을것이다. 

해결법은 

userRouter.get(routes.editProfile, editProfile);
userRouter.get(routes.userDetail, userDetail);
userRouter.get(routes.changePassword, changePassword);

읽는순서를 editProfile로 먼저 읽게해주면 users/edit-profile로 이동시 정상적으로 접속가능하다.

============================= 해결 =======================================

그리고 form을나와 a 링크하나를 만들어줌. 클래스명은 form-container__link
-> a(link)가 .form-container(div)안에 있기때문.

a.form-container__link(href=`/users${routes.changePassword}`) Change Password
-> Change Password란 text를 넣어줬고 클릭시 href에 있는 주소로 갈거임.

href링크를보면 $를 썼을거임. 이것은 js에서 우리가 ``(백틱)안에서 text와 변수를 같이 쓰는법.

pug에선 ${}를 대신해서 #{}를 쓰지만. ``(백틱)과 #{}는 같이 쓸 수 없음.

``(백틱)은 오로지 ${}를 위해서 존재.

You can't mix #{} with `` 
`` is only for ${}

============================= error 2====================================
위와 같이 userRouter에서 읽는 순서를 바꿔줘야함. 

userRouter.get(routes.editProfile, editProfile);
userRouter.get(routes.changePassword, changePassword);
userRouter.get(routes.userDetail, userDetail);

이렇게 userDetail을 맨밑으로 내려줌. 이렇게 수정안하고 링크를 따라가면 앞선 :id인식문제로 userDetail창이 보여짐
============================= 해결 =======================================

submit을 눌러도 에러가 뜰꺼임. 

2.19와 같이 컨트롤러를 작성하지 않았기 때문.

===================== End #2.20 ===========================================