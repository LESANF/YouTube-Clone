2.20 강의를 마치고 2.21강의를 시작하기전 form에 대한 작성을 모두 마쳤다 
-> (ChangePassword, Upload, editVideo, editProfile)
-> editVideo의 경우 videos/1/edit 이런식으로 :id를 지정해서 들어가줘야 확인할 수 있다.

이제 전체 애플리케이션의 흐름을 가짜로 한번 만들어본다. 아직 데이터베이스를 이용해 실제 데이터를 넣기 전이니까.
-> 가짜 정보를 넣어서 템플릿을 완성할거다.

한가지 문제가있음.

rotues.js에 있는 라우트들은 express와 잘맞는다.
-> express는 /:id/edit 같은 것을 이해할 수 있다.

여기서 문제가 뭐냐면 /videos/1/edit으로 가보면 알 수 있다.

Delete Video 링크를 검사해보면 /videos/:id/delete로 되어 있다.

여기 /:id에는 url에 있는 값인 1이 실제로 들어가야 한다.

우선 home 화면을 보자, 여기에 video 목록을 보여줘야 한다. 

가짜 데이터를 만들어 보여줄것이다. 데이터베이스를 만들기 전이니깐.

니꼬는 항상 이런식으로한다. 데이터베이스에 무엇을 추가해햐할지 설정을 하기 전에 빠르게 수정하기 위해
-> db.js파일 생성

Const videos 배열 선언. 배열 안에 객체생성. (객체를 배열로 잡아줌.)
-> videos는 video의 배열이다.

id는 임의의 숫자, title, description, views, videoFile(html video mdn을 검색하여 데모url첨부),creator(객체) 를 하나의 객체로 추가.

creator는 사용자이므로 객체안의 객체이다. (Id, name, email)로 객체를 생성 

모두 까자 데이터로 생성하는것. 

Const videos를 export해주고 videoController.js로 가서. home의 컨트롤러에서 렌더에 뿌려준다.

물론 뿌리기전에 import { videos } from "../db.js"; 사용하기위한 import

import 했으면 home 컨트롤러의 render에 videos를 넘겨준다. Videos : videos 는 videos로 줄일 수 있다.

이제 렌더받은걸 home.pug(템플릿)에서 사용할 것이다.

.videos(div)안에 each 변수명 in videos 입력.

h1=item.title
p=item.description 이런식으로 render받은 db.js를 뽑아서 쓴다. 우리는 each다음 변수명을 item으로했음.

이것이 videos배열에서 하나씩 video를 처리하는 방식이다. videos배열에서 하나씩 template을 적용시키는것이다(each ~~)

템플릿의 videos는 controller에서 전달한 videos와 이름이 같아야함.

위에서 밑으로 하나씩 보여주도록 했고, 비디오 각각의 title, description을 보여주도록 코드를 작성했다.

우리는 db.js에 배열을 선언했고 배열안에는 4개의 객체가 선언되어있다. Each in을 사용하여 4개의 객체가 모두 title과 description을 표시했다.

이런것을 iteration(반복) 이라고 한다.

모든 요소들이 배열에 있고, pug에서 each item in videos를 통해 iteration을 할 수 있다. item 변수명은 무엇으로 바꾸든 ok

그 변수는 videos 배열에서 iteration하면서 각 값 하나씩을 가짐.

(나중에 만들 db는 우리가 만든 페이크와 비슷한 모양일거고, 이를 비추어 지금 작성한 코드가 정확하다고 할 수 있다)

* each in 문법은 pug에서만 사용.

=====================================#2.21 end========================================

화면에 videos를 추가했고, 다른 곳들에서 사용할 HTML 코드를 만들것이다.

HTML을 재활용할거야, footer를 include해서 재활용해는 것처럼, 비디오 블록 html 코드를 만들것이다.

Partials = 다시 사용하는 HTML block
Mixin = 동적 데이터와 함께 사용하는 HTML 코드.

동일한 HTML 구조를 사용하지만, 다른 데이터를 사용해야할때 = mixin

HTML을 재사용하지만, 데이터를 보내지 않으려면  = partials

웹사이트에서 계속 반복되는 코드를 복사-붙여넣기 하지않고 재활용하는 방법을 mixin이라고 한다.

views폴더 아래 mixins폴더 생성.

mixin은 웹사이트에서 자주 반복되는 html 코드를 담고 있어.

폴더안에 videoBlock.pug 생성, 그리고 mixin videoBlock()를 사용 

mixin은 pug의 함수의 일종이다. mixin에는 인자가 하나 필요함. 인자의 이름을 video라고 하고 기본값은 {}로. 기본적으로 빈 객체이다.
-> mixin videoBlock(video = {}), videoBlock은 mixin의 이름.

mixin에 인자가 입력되면, 그 객체의 이름을 video라고 한거다.

객체가 mixin에 입력되면, 그 객체의 title을 받아와서 화면에 표시하는 것이다.

home.pug로 와서 mixin을 include함. ( include mixins/videoBlock.pug )

< mixin 사용법 정리  >

1. 사용할 템플릿에 include 한다(mixin이 있는 pug를 mixin은 pug의 함수개념)
-> ( include mixins/videoBlock.pug ) 우리의경우 home.pug에 해당 코드를 입력하여 include

2. each 변수명 in videos 안에 +mixin 변수명으로 객체 생성 ({})
-> +videoBlock({})

*여기서 each item in videos란. 
-> 해당프로젝트 기준으로 변수명을 item, videos는 가짜db.js에서 받아온 배열화된 객체.

말그대로 배열을 읽기위한 루프(반복)문이다. db.js에는 내가 만들어낸 4개의 객체가 배열화 되어있고

해당정보를 뽑아서 사용한다고 가정할시(title을 뽑는다고할시) 순서대로 4개의 title이 뽑혀서 출력된다 (top to bottom)

3. 만들어 놓은 home.pug에 +videoBlock({}) 안에 객체를 생성함.

ex) { 객체명 : item.title, 객체명2 : item.description }

이런식으로 객체명은 아무거나 해도되지만 each 변수명은 반드시 지켜야함. item으로 선언해놨다.

테스트 하기위해 만들어놓은 fake db(db.js)에 있는 객체값을 뽑아씀. 이렇게 +videoBlock안에 객체를 선언

4. home.pug에 선언된 객체들이 videoBlock.pug에 있는 mixin videoBlock(객체명 ={}) 으로 들어가고

객체명은 아무거나해도됨. 초기에 빈객체로 생성되어있었지만 home.pug의 +로인해 객체인자를 받게되고

pug문법으로 h4=객체명.title 으로 선언해줌 여기서 title은 home.pug에서 선언한 title : item.title의 왼쪽 객체명(title)이다.

potato : item.description 으로 home.pug에 추가했으면 potato가 인자로 넘어가 videoBlock.pug에서

h4=객체명.potato 이런식으로 html작성. [여기서 객체명은 mixin의 초기 빈객체로 선언한 객체명]


※ 정리하자면 home.pug에 +videoBlock의 객체들이 videoBlock로 전달되어 mixin함수를 실행시키고 그함수는 html로 내보낸다.

이제 실제로 mixin 코드를 작성해 볼것이다. 

순서대로 큰비디오화면, 비디오제목, 비디오 조회수 이렇게 기본 디자인을 잡는다.

videoBlock.pug 파일에 mixin videoBlock(video = {}) / mixin 함수명을 videoBlock로 주고 인자로받을 객체를 video로 설정하고 

우선 빈객체로 생성. 그리고 mixin을 작성.

.videoBlock
        video.videoBlock__thumbnail(src=video.videoFile, controls=true)
        h4.videoBlock__title=video.title
        h6.videoBlock__views=video.views

다음과같이 .videoBlock(div)안에 video태그를 작성해주고 video, h4, h6에 각각 맞는 클래스명 작성

우리가 home.pug로부터 필요한것은 videoFile, title, view 3개를 받아와야함.

이미 db.js로 가짜db 테스트를위해 써놨고 +videoBlock안에

videoFile : item.videoFile,
title : item.title,
views : item.view

넣어줌 선언한 객체명이 다시 mixin함수로 넘어가고 그것을 바탕으로 함수가 뿌려줄것이다 html에 이렇게 작동.

나중에는 실제 db를 사용할거임 지금은 연습을위해 db.js를 직접 임의로 작성해서 테스트해봄.

============================#2.22 End====================================

search 화면을 작업할 차례, search도 home 화면과 거의 비슷함.

videoController에서 home과 같이 res.render에 videos객체 넣어줌.

일단은 비디오 검색 기능을 구현하지않음. 아직은 데이터베이스가 없기때문.

search.pug로가서 일단 .search__videos(div)를 추가. home과 똑같이 mixin부분을 넣어줌 (include도 하고)

home에서 input을 통해 값을 입력하고 searh로 넘어가면 비디오가 보임.

< Join >

누군가가 회원가입을 하면, 자동으로 Login을 하고나서 Home 화면으로 이동하고 싶다.

Join화면에서 Full Name, email, password, verify password를 입력하고 Join Now를 클릭하면

/join으로 POST할 수 없습니다 라는 에러가 보인다. 
-> /join 경로로 POST 하기 위한 설정이나 코드가 없기떄문

join의 이름을 더정확히 getJoin으로 바꿈, postJoin도 사용할거기때문.


userController에 join을 getJoin으로 바꾸고 새롭게 export const postJoin~~ 라는 함수생성.

globalRouter에도 userController와 연결하기위해 새롭게 import해줌.

get, post각각 경로 생성.
->
globalRouter.get(routes.join, getJoin);
globalRouter.post(routes.join, postJoin);

다시 userController로 돌아와서

postJoin의 함수내용을 작성한다. 

console.log(req.body); 넣고 서버를 실행해봄.

다시 한번 join에서 정보를다채워넣고 Join Now를 하면 이번엔 콘솔에서 req.body에 대한 내용을 볼 수 있다.

우리가 입력한 모든 값이 객체형태로 콘솔에 찍혀나오는걸 확인할 수 있음.

콘솔에서도 알겠지만 그냥 join으로 접근하는건 GET방식이고 form에있는 데이터를 전송하여 join에 다시 접근하는것은 POST이다.

여기서 우리가 처음 설정해놓은 middleWare에 대해 잠시 짚고 넘어가야한다.
->
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

app.js에서 작성한 npm을 통해 install한 middleWare이다. 

해당코드를 지우고 form데이터를 POST형식으로 전송하면 객채형으로 req.body내용이 표시되지않는다. undefined로 뜸.

console.log(req.body);를 통해 우리가 모든 정보들을 req.body에서 가져와야하는것을 알게되었다.

이전에도 했듰이 es6(ECMAScript6)를 이용해 req안에있는 body에서 name, email, password, password2를 가져올 수 있음.
->
const { bdoy: { name, email, password, password2 } } = req;
-> req에서 req.body에있는 name, email, password, password2를 객체선언 하는걸 es6로 나타낸 부분.

password와 password2가 같은지 체크해야함. 다르면 로그인 시킬 수 없음.

if 조건식을 사용하고, 만약 다르다면 잘못되었다는 상태코드를 전달할거임.

상태코드 (status code)는 인터넷이 서로 어떻게 상호작용하는지 표시하는 것이다. 
-> 여러가지 코드가 있지만 400의 경우 잘못된 요청이라는 뜻.

이렇게 상태코드를 보내는 것을 res에서 할 수 있다.

사용자의 비밀번호가 잘못되었다면, 400으로 상태코드를 등록하고, join화면을 render한다.

페이지에 에러를 전달하는건 좋은 일이다.

else로 비밀번호가 같다면 redirect한다 home으로. 우리는 routes.js에 경로를 모아뒀기때문에 routes를 import하여 사용하면됨.

if (password !== password2) {
    res.status(400);
    res.render("join", { pageTitle: "Join" });
} else {
    res.redirect(routes.home);
}

다음과 같은 조건문을 postJoin 함수에서 사용. redirect는 말그대로 결과로 지정된 URL로 돌아가는것

우리의 경우 join now를 누르면 login이 된상태로 home으로 돌아가는걸 목포로 하고있고 

회원가입이 완료되어 join now를 누르면 redirect로 home으로 가게 설정해준것이다.

























