2.20 강의를 마치고 2.21강의를 시작하기전 form에 대한 작성을 모두 마쳤다 
-> (ChangePassword, Upload, editVideo, editProfile)
-> editVideo의 경우 videos/1/edit 이런식으로 :id를 지정해서 들어가줘야 확인할 수 있다.

이제 전체 애플리케이션의 흐름을 가짜로 한번 만들어본다. 아직 데이터베이스를 이용해 실제 데이터를 넣기 전이니까.
-> 가짜 정보를 넣어서 템플릿을 완성할거다.

한가지 문제가있음.

rotues.js에 있는 라우트들은 express와 잘맞는다.
-> express는 /:id/edit 같은 것을 이해할 수 있다.

여기서 문제가 뭐냐면 /videos/1/edit으로 가보면 알 수 있다.

Delete Video 링크를 검사해보면 /videos/:id/delete로 되어 있다.

여기 /:id에는 url에 있는 값인 1이 실제로 들어가야 한다.

우선 home 화면을 보자, 여기에 video 목록을 보여줘야 한다. 

가짜 데이터를 만들어 보여줄것이다. 데이터베이스를 만들기 전이니깐.

니꼬는 항상 이런식으로한다. 데이터베이스에 무엇을 추가해햐할지 설정을 하기 전에 빠르게 수정하기 위해
-> db.js파일 생성

Const videos 배열 선언. 배열 안에 객체생성. (객체를 배열로 잡아줌.)
-> videos는 video의 배열이다.

id는 임의의 숫자, title, description, views, videoFile(html video mdn을 검색하여 데모url첨부),creator(객체) 를 하나의 객체로 추가.

creator는 사용자이므로 객체안의 객체이다. (Id, name, email)로 객체를 생성 

모두 까자 데이터로 생성하는것. 

Const videos를 export해주고 videoController.js로 가서. home의 컨트롤러에서 렌더에 뿌려준다.

물론 뿌리기전에 import { videos } from "../db.js"; 사용하기위한 import

import 했으면 home 컨트롤러의 render에 videos를 넘겨준다. Videos : videos 는 videos로 줄일 수 있다.

이제 렌더받은걸 home.pug(템플릿)에서 사용할 것이다.

.videos(div)안에 each 변수명 in videos 입력.

h1=item.title
p=item.description 이런식으로 render받은 db.js를 뽑아서 쓴다. 우리는 each다음 변수명을 item으로했음.

이것이 videos배열에서 하나씩 video를 처리하는 방식이다. videos배열에서 하나씩 template을 적용시키는것이다(each ~~)

템플릿의 videos는 controller에서 전달한 videos와 이름이 같아야함.

위에서 밑으로 하나씩 보여주도록 했고, 비디오 각각의 title, description을 보여주도록 코드를 작성했다.

우리는 db.js에 배열을 선언했고 배열안에는 4개의 객체가 선언되어있다. Each in을 사용하여 4개의 객체가 모두 title과 description을 표시했다.

이런것을 iteration(반복) 이라고 한다.

모든 요소들이 배열에 있고, pug에서 each item in videos를 통해 iteration을 할 수 있다. item 변수명은 무엇으로 바꾸든 ok

그 변수는 videos 배열에서 iteration하면서 각 값 하나씩을 가짐.

(나중에 만들 db는 우리가 만든 페이크와 비슷한 모양일거고, 이를 비추어 지금 작성한 코드가 정확하다고 할 수 있다)

* each in 문법은 pug에서만 사용.

=====================================#2.21 end========================================

화면에 videos를 추가했고, 다른 곳들에서 사용할 HTML 코드를 만들것이다.

HTML을 재활용할거야, footer를 include해서 재활용해는 것처럼, 비디오 블록 html 코드를 만들것이다.

Partials = 다시 사용하는 HTML block
Mixin = 동적 데이터와 함께 사용하는 HTML 코드.

웹사이트에서 계속 반복되는 코드를 복사-붙여넣기 하지않고 재활용하는 방법을 mixin이라고 한다.

views폴더 아래 mixins폴더 생성.

mixin은 웹사이트에서 자주 반복되는 html 코드를 담고 있어.

폴더안에 videoBlock.pug 생성, 그리고 mixin videoBlock()를 사용 

mixin은 pug의 함수의 일종이다. mixin에는 인자가 하나 필요함. 인자의 이름을 video라고 하고 기본값은 {}로. 기본적으로 빈 객체이다.
-> mixin videoBlock(video = {}), videoBlock은 mixin의 이름.

mixin에 인자가 입력되면, 그 객체의 이름을 video라고 한거다.

객체가 mixin에 입력되면, 그 객체의 title을 받아와서 화면에 표시하는 것이다.

home.pug로 와서 mixin을 include함. ( include mixins/videoBlock.pug )

기존 h1=blablaba, p=blablabala로 적지않고, mixin을 이용함. 

방법은 +videoBlock({ })을 사용, {}안에 title : "blablabla"를 쓰고 결과를 확인해보면 

4개의 blablabla가 home화면에 출력되어있다. videos에는 item이 4개 있으니까, item 별로 한번씩 tile로 blablabla를 보여주는거지.

원리는 home.pug에 videoBlock {}안에 입력된 title : "blablabla"가 mixing/videoBlock.pug로 넘어가서

video 인자로 들어가게되고 거기서 .title로 인해 뽑혀서 출력되는 것이다.

3분 40초대부터 

