조회수 올라가는 API를 구축해보자 

비디오가 끝나면 views가 1씩 증가하게 해줄거임.

Ajax를 사용할거임.

비디오가 끝나면, JS에 전달해서 서버 URL로 가게하고 그 URL은 이 비디오가 시청됐다고 등록하게 됨. views가 1오르는 형태로.

하지만 이건 브라우저에서 수정할 수 없음. 

이건 single page application의 기본토대임. 기본적으로 다시 로드되지않음.

웹사이트가 어디갔다가 돌아오는형태가 아니라 머물러있는거임. 그리고 뒷단에서 처리함.

넷플릭스나 유튜브가 이런방식으로 돌아감. 유튜브를 보면 비디오를 선택해도 어디로 가지않음.

내용을 바꾸긴하지만 어디로가버리는건 아님. JS가 video를 가져다가 보여주기 때문임. 이렇게 해주는게 ajax이다.

ajax작업을 시작하기 전에 우리가 해야 할건 새로운파일을 우리 웹사이트에 추가해야함 그건 API view임.

localhost:4000/videos/id. 로되어있는데 이건 템플릿을 렌더링 해준거임.

이제 우리가 만들건 URL과 controller임 렌더링과 전혀 상관없음 이건 그냥 동작하고 http status code로 내가 답해주는 형식임

routes로가서 새로운 routes를 만들자. 

API는 그냥 server와 통신하기 위한 URL이 될거임. user가 접근 할 수 있는 url이 아님.

user는 해당 API url을 찾을 수 없고, url에 어떤것도 렌더 할 수 없음.

// API

const API = "/api";
const REGISTER_VIEW = "/:id/view";

누군가 /api/12/view로 이동하면 우리는 view의 수를 하나 증가할거임. 

이 경로는 유저가 어떤곳을 클릭해서 들어가는 그 라우터가 아님. 템플릿이 없으니까.

객체에 추가시켜주자.

라우터에 apiRouter.js로 파일을 만들어줌. 그리고 app.js에 경로를 정해주자. import apiRouter from "./routers/apiRouter"; 추가
-> app.use(routes.api, apiRouter);

videoController로가서 함수를 만들자 postRegisterView라는 함수.

registerView는 video를 try,catch구문을 통해 찾을거임. 

export const postRegisterView = async (req, res) => {
  const {
    params: { id }
  } = req;
  try {
    const video = await Video.findById(id);
    video.views += 1;
    video.save();
    res.status(200);
  } catch (error) {
    res.status(400);
  } finally {
    res.end();
  }
};

위와같은 코드가 함수임. params를 통해 :id를 받아오고 그걸 토대로 비디오를 찾음.

성공적으로 실행됐으면 실행코드200, views를 증가시키고 video를 저장함

에러를 잡으면 코드400을 넘김. 그리고 try, catch중 아무거나 실행되면 finally로 들어가서 end() 함 요청을 끝낸다는 뜻.

보다싶이 관련된 템플릿(view)가없고, 그냥 API view임 이 의미는 server하고만 소통한다는 뜻임.

테스트해보자. http://localhost:4000/api/5e3115dc655f520b8ccebf65/view  비디오의 id를 직접넣어서 API의 주소에 넣어봤음 

에러코드가 아무것도 뜨지않았고, 성공적으로 0 views에서 1 view로 코드가 작동한다. 

해당 API주소를 새로고침한번 더해주면 2views가 됨.

이게 내가 API를 만드는 방법임. 올바른 설정으로 visit할 url을 만들고 그들은 데이터베이스로 뭔가를 할거임.

그냥 함수고, 렌더링을 안한다. 그냥 데이터베이스만 변경함. 

API는 데이터베이스로 다른 서비스와 통신하기 위해 만들어진거임. 

인스타그램이나 유튜브 페이스북도 API를 가지고있고 인스타그램을 예로들어서 사진을 업로드 하려고하면 인스타그램API를 사용하면됨.

우리는 성공적으로 API를 만들었고 이건 우리의 비디오를 다봤을 시점에 붙일거다. 그리고 자동적으로 이 url을 뒷단에서 접근할거임.

=============================#10.0 END===============================

뒷단에서 URL에 접근하기 위해서는 frontednd로 가야함. videoPlayer.js에서 해보자 videoPlayer는 우리가 사용하고 싶은거니까.

내가 하고싶은건 내 frontend 페이지에서 axios라는걸 import하고 싶어, 감사하게도 난 같은 걸 쓸거다. package.json이란걸 쓸거임.

내 fronted/backend에다가. 만약 내가 이걸 큰 프로젝트에서 한다면, 나는 다른 frontend와 beackend를 갖길 원하겠지만

우리의경우엔 일단 이걸로 만족하자. npm install axios;

axios는 라이브러리인데. HTTP request요청을 멋지게 바꿔줌. 메뉴얼로 해주는거 대신에.

메뉴얼로 url을 얻고싶으면 fetch("")하고 url을 ""안에 넣어주는거임.

브라우저 콘솔에서 fetch("http://localhost:4000/api/5e3115dc655f520b8ccebf65/view")를 해주면 views가 올라감.

axios는 comments부분에서하자. comments는 우리가 여기서 했던 거와 약간 비슷하게 추가 될거임.

코멘트가 폼에 작성해서 보내고 새로고침되서 적용하는걸 원하지않음. 코멘트가 ajax(JS를 통해서 서버에 데이터를요청)로 작성되길 원한다.

videoPlayer를 위해 fetch를 쓰고 comments를 위해서 axios를 쓸거임.

videoPlayer로 돌아와서 함수를 생성.

const registerView = () => {
  const videoId = window.location.href.split("/videos/")[1];
  fetch(`/api/${videoId}/view`, {
    method: "POST"
  });
};

fetch에서 조금 전과 다른부분을 찾을 수 있음. http://localhost:4000이부분이 없음.

그이유는 우리는 getRequest를 가지고있기때문. 하지만 우린 POST방식으로 바꿔야함 코드와같이 

왜냐면, 데이터베이스 변경할 필요가 없으면 get, 데이터베이스 변경할 필요가 있으면 반드시 post로 만들어야함.

함수를 설명하기 앞서 split은 어떠한것을 기준으로 나눠주는거임 나눠진건 배열로 들어감. 

이경우엔 /videos/을 기준점으로 줬음. 

브라우저의 콘솔에서 window.location을 치면 브라우저의 정보안에서 href즉 URL을 얻을 수 있다.
-> http://localhost:4000/videos/5e3115dc655f520b8ccebf65 이런 URL을 얻을 수 있음.

split의 기준점으로 http://localhost:4000과 5e3115dc655f520b8ccebf65. 두 덩이를 얻을 수 있는데 이건 배열에 들어감.

우리는 뒤에 id가 필요하기때문에 [1]번째 배열을 가져와서 videoId로 선언한 변수에 담아줌. ( 배열은 0부터시작 )

여기까지하면 함수를 완성했고 이제 registerView()로 사용을해야됨. 

비디오가 끝까지 재생했을때 해당함수를 실행해서 views를 1증가시킬꺼니까, function handleEnded()에 넣어줌.

난 지금 API를 만든거임. controller는 렌더링없이 데이터베이스를 바꿨음.

=============================#10.1 END===============================

comment 부분을 하자.

backend부터 처리하자. routes.js로가서 root를 만들어보자 view를 만들었던것 처럼.

원한다면 controller를 하나 더 만들 수 있지만, comment가 그렇게 크지 않으니 그렇게 하지않을거임.

const ADD_COMMENT = "/:id/comment"; 하고 객체에 addComent로 추가.

videoController에서 작업하자. ( 댓글을 남기는건 videoDetail 이기때문. )

정보를 보낼거니 post로 보내는걸 잊지말자.

export const postAddComment = async (req, res) => {} 로 선언해주고 아래의코드와 같이 파라미터로부터 ID와 body의 comment를 얻자

const {
    params: { id },
    body : { comment },
    user
  } = req;

그리고 try,catch,finally를 사용. catch에 res.status(400)을 해줌. try를하던 catch를 하던 finally에는 res.end()로 끝내줌.

일단 비디오를 먼저 얻어봄 video가 있는지 없는지 알아야하니. 그리고 comment를 만들필요가있음.

Comment모델을 쓰기위해 import시키자. import Comment from "../models/Comment";

try안에는 비디오를 findById로 찾고. newComment를 만들어준다.

const newComment = await Comment.create; 이걸위해 Comment모델을 가져옴.

짜여진 모델에 들어갈건 text와 creator, 그리고 comment는 Video 모델에도 포함되는걸 잊지말자.

    const newComment = await Comment.create({
      text: comment,
      creator: user.id
    });
    video.comments.push(newComment.id);
    video.save();

다음코드를 보면 비동기식으로 newComment를 선언하고 Comment의 모델을 create함. create은 생성하고 DB까지 저장하는거임

그럼 밑에 video.save()는 뭐냐고 할 수 있지만 위에 코드를 보면 설명된다.

video는 findById로 Video모델에서 찾아온거고 comments는 애초에 Video모델을 짤때 넣어둔거임.

그러니 선언한 newComment를 push로 데이터베이스에 넣어주고 save한거임.

apiRouter로 가서 경로를 만들어주자. apiRouter.post(routes.addComment, postAddComment);

video Detail로 가서 

ul.video__comments-list
                each comment in video.comments
                    span comment.text 

아래와 같이 리스트 추가.

comments에 대한 객체도 필요함 videoDetail에서 populate("comments")로 받아오자.

Video를보면 comments와 creator가 있지, 그것들의 내용을 가져오고싶으면 populate하면됨.

예전개념 기억안날까봐 상기시킬겸 남김 each comment in video.comments / video.comments에서 comment를 하나씩 가져오겠다는거임

*** 정리 ***

백엔드 파트를 했고 postAdd를 하는데 id는 url에서 가져오고 comment는 body에서 얻어옴.

video를 찾고 newComment를 생성하고 그리고 그 comment id를 video comment에 넣어줌.

이게 다임. 내가 이해해야 하는 부분이 있는데, backend는 모든게 동작하는게 같음.

params: {id}, body: {comment} 이건 우리가 form을 submit한거랑 똑같이 작동함.

submit하는 모든거(upload video, change password, login같은 폼) 이건 액션이나 메소드가 없음. 왜냐면 이걸 JS하고 할거기때문.

=============================#10.2 END===============================

fetch ("서버주소")는 웹브라우저에게 이 서버주소로 요청해달라는 말임.

ajax는 비동기 방식으로 신호를 보냈을 때 응답 상태와 상관 없이 동작을 수행하는거임. 주목적은 화면 전환없이 클라이언트측과 서버측간의 정보를 교환하기위함.

이번엔 ajxs로 보낼꺼임. assets->js안에 addComment.js생성. 코멘트부분의 pug를 DOM형태로 가져와서 쓸거임.

DOM을 선언해주고 submit 이벤트를 달아줌. 그리고 submit을 했을때 페이지가 새로고침 되지않게 기본값을 막아주자
->   event.preventDefault(); 로.

--------------------------------------------정리 --------------------------------------------

form에 "123"이라는 text를 입력함. submit이벤트에 발생한다. handleSubmit으로 이동.

event.preventDefault()로 인해 form에서 데이터를 넘겨도 새로고침하지않음.

input에대한 DOM을 불러옴 쿼리셀렉터로. const comment로  선언하고 거기에 담기는건 input.value임. 우리경우 123이됨.

해당값은 sendComment(comment)처리됨 sendComment함수에 인자로 comment(value)를 넘겨줌.

그리고 commentInput.value="";처리 값을 넘기고 또 댓글을 남겨야하니 input창의 내용을 공백으로 만들어줌.

sendComment로 이동. input.value의값을 받았음 comment인자로. 

API에 접근하기위해 주소를받아옴. 현재 브라우저에서 ID부분만 split으로 받아와 videoId 변수에 담아줌

axios를 사용할껀데, awiat를함. 물론 async도써야함.

axios로 url에 접근하고, 보내는방식은 POST, 그리고 data로 우리가 받은 인자 comment를 넘겨줌 (123)

apiRouter.post(routes.addComment, postAddComment);

/api/:id/comment로 접근(routes.addComment) 이되었으니 postAddComment함수를 실행함.

postAddComment함수는 id, comment, user를 const로 선언했음.

Comment.js에서 정의한 comment모델을 create할거임 create는 생성과 동시에 DB에 저장됨.

text는 comment(123)이ㄷ되고 creator는 user.id임

이렇게 comment모델 생성이끝나면, video.comments.push(newComment.id)를 해줘야함.

video모델에는 comments가 있기때문. 그리고 video모델에 정보를 넣었으니 save()로 저장까지시킴.

=============================#10.3 END===============================

댓글 추가를 fake로 만들자. 누군가 댓글을 달면 댓글을 페이크로 추가할거임.

페이크 댓글이 추가되면 comments도 1씩 올라가게. 

데이터베이스에서 확인되는 진짜 댓글이 아님. 하지만 axios의 status code를 listen할거고 code가 200이면 댓글이 추가됐다는거니까

comments를 1올릴거임. 

DOM 형태로 ul과 comment number가 들어있는 span을 가져옴.

const commentList = document.getElementById("jsCommentList");
const commentNumber = document.getElementById("jsCommentNumber");

const addComment = comment => {
  const li = document.createElement("li");
  const span = document.createElement("span");
  span.innerHTML = comment;
  li.appendChild(span);
  commentList.prepend(li);
  increaseNumber();
};

li, span을 만들어주고 span에 인자로 받은 comment. 우리가 입력한 input.value를 넣어주고 그걸다시 li에 넣어줌.

commentList.prepend(li)는 객체를 앞에써주는거임. 댓글을 남겼을때 최신댓글이 위에서부터 아래로 쌓여가야함 append를 쓰면 뒤에서부터 참

그리고 가짜 댓글을 넣었기 때문에 숫자를 증가시켜줘야함 increaseNumber()로.

const increaseNumber = () => {
  commentNumber.innerHTML = parseInt(commentNumber.innerHTML, 10) + 1;
};

commentNumber(span)의 innerHTML은 기존 commentNumber.innerHTML에 +1해준거임. 가져온 innerHTML은 string형이니 parsInt로 number형으로 바꿈

10은 10진수라는 뜻임.

그리고 videoDetail로 이동해서 each comment in video.comments.reverse() 리버스를 하는이유는 새로고침 했을때 우리가 원하는것처럼

최신의 댓글이 위에올라와있기 원함. 그래서 리버스해줌.

=============================#10.4 END===============================


