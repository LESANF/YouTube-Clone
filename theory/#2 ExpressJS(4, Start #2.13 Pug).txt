Pug는 view engine이다.

설치 - npm install pug

우리가 설정할 부분은 app.set부분이다.  

set은 app.set(name, value) 보는것과 같이 name과 value가 필요하다.

application의 설정을 하는 함수다. 설정할 수 있는 몇몇 값들이 있다.

우리는 view engine 설정을 바꿀것이고, view engine 설정의 기본값은 undefined다.

view engine 설정값을 pug로 바꿀것이다. app.set("view engine", "pug"); view engine의 이름을 pug라고 입력.

pug와 express에는 view 파일들의 위치에 관한 기본 설정이 있다. 만약 그 설정을 바꾸고 싶다면 'views' 설정을 바꾸면된다.

application의 화면이 담긴 디렉토리나 디렉토리의 배열을 입력하면된다.

html 파일을 저장해야하는 폴더의 기본값은 [ 프로젝트의 작업 디렉토리 + '/views' ]이다.

views폴더를 하나 만들고 그안에 파일을 하나 더만든다. 파일명은 home 확장자는 html대신 pug.  home.pug

home.pug안에서 코드를 작성해보자

hello! 라고 쓰고싶으면, p hello! 라고 작성한다. 이렇게 적어줘야 작동하는 pug코드이다.

pug는 템플릿 언어야. express의 view engine이지.

pug는 html파일들이 더 아름답게 보이도록 만들어줘.

html파일에선 <p>hello!</p>지만 pug 파일에서는 p hello! 라고 적으면 됨.

pug는 일반적인 html코드를 변환해준다. 이것이 템플릿이다.

Q. 그럼, 이제 이 템플릿을 웹사이트에서 보여주려면 어떻게 해야 할까 ? 컨트롤러에서 res.send로 home을 전송하는 것 대신에 말이야.
A. videoController로 가서 home을 전송하는 대신 res.render를 사용할거다. render 함수의 인자로 템플릿 파일의 이름을 입력하면 돼. 소문자로.
-> res.render("home");

이 함수가 views폴더에서 파일명이 home이고 확장자가 pug인 템플릿 파일을 찾은 후에 보여줄것이다.

npm start를하면 hello!로 나올것이고 브라우저에서 검사를하면 <p> 태그안에들어간 hello!로 나타날것이다.

controller에 있는 모든 res.send들을 res.render로 바꾸고 views폴더에 home.pug처럼 파일을 모두 만들어준다 함수에 대해.