녹화기능을 넣을거임.

레코딩 버튼을 누르면, 프리뷰화면을 통해 녹화를 진행할 수 있게 해줌.

upload.pug에서 작업을 진행할거고 HTML을 좀 추가해보자.

 .record-container#jsRecordContainer
            video#jsVideoPreview
            button#jsRecordBtn Start Recording

다음을 .form-container에 포함시키고

css로 버튼 위치와 preview를 검게만들어준다. 레코딩 시작하기전 가독성을 위해 배경을 검정색으로잡아줌.

해당 HTML에 대한 scss파일을 partials에 생성해줌 videoRecorder.scss

우린 stream을 카메로부터 얻을 꺼임. 그리고 그 stream을 video에 넣을거임.

assets->js->videoRecorder.js를 생성 main에 import시켜주자.

아래의 videoRecorder 파일을 살펴보자.

const recorderContainer = document.getElementById("jsRecordContainer");
const recordBtn = document.getElementById("jsRecordBtn");
const videoPreview = document.getElementById("jsVideoPreview");

const startRecording = async () => {
  try {
    const stream = await navigator.mediaDevices.getUserMedia({
      audio: true,
      video: { width: 1280, height: 720 }
    });
    videoPreview.srcObject = stream;
    videoPreview.muted = true;
    videoPreview.play();
  } catch (error) {
    recordBtn.innerHTML = "☹️ Cant record";
    recordBtn.removeEventListener("click", startRecording);
  }
};

function init() {
  recordBtn.addEventListener("click", startRecording);
}

if (recorderContainer) {
  init();
}


전체를 감싸는 jsRecordContainer, 레코딩시작하는 버튼jsRecordBtn, 프리뷰를 띄우는 jsVideoPreview까지 const선언하고 받아옴.

버튼을 클릭했을때 startRecording함수를 시작할거고.

이건 비동기식으로 진행해야함. 그리고 media API를 쓸거임.

우리는 media를 user에서 부터 얻어와서 video에 넣을거임. 우리가 video도 얻어야 한다는 의미.

media API중 MediaDevices.getUserMedia()를 사용할거임.

try catch구문으로 진행할거고 어떤 사람은 권한을 통과하지 못할테니까

에러가 발생했을때 버튼의 innerHTML을 수정해주고 레코딩을 하면안되니 클릭이벤트 리스너를 제거함.

만약 접근을 허락시키면 awiat로 진행. 기다리는 이유는 user가 브라우저에게 권한에 대한 대답을해야함.

auio나 video같은 권한을 물어볼거다. 그럼 접근하게해주면 try. 아닐시 catch. 접근을 위해 navigator 함수를 쓸거임.

네비게이터는 브라우저와 관련된 정보를 컨트롤 한다. 브라우저에 대한 버전, 정보, 종류등 관련된 정보를 제공할거임.

우리가 쓸 MediaDevices.getUserMedia() 함수안에 확인 객체로 audio와 video를줌 위와같은 코드에 보면됨. 

video의 창사이즈도 조절할 수 있음.

videoPreview.srcObject = stream; 이코드를 보자 video#jsVideoPreview는 video 태그임.

하지만 보통 src="주소"형식으로 비디오를 넘겨주는데 우리는 src에 videoPlayer를 줄 수 없음.

왜냐면 지금 레코딩하는건 파일이아님. console.log(stream)으로 찍어서 보면알겠지만 이건 객체(object)임.

그래서 stream객체를 videoPreview에 .srcObject로 넘겨줌.

videoPreview.muted = true;
videoPreview.play();

다음 코드의 .play()는 말그대로 재생이고 muted같은경우 

오디오를 캡쳐해야함 비디오의 오디오를 하지만 마이크가 연결되어있으니 내 말소리는 들리지않게 하기위해 muted = true한거임.

원래 getUserMedia()에서 권한받을 대상을 지금 

audio: true,
video: { width: 1280, height: 720 } 로해놨는데

이건 내컴퓨터에 마이크, 캠이 설치되어있어야 권한에대한 창이떠지고 진행됨 연결이 안되어있으면 cant record로 바로넘어감.

유의할것.

==============================#9.0 END================================

startRecording에서 try, catch구문을 지나고 removeEventListener를 삭제해줘야함.

Start Recording을 시작했으면 클릭을 해서 stop후에 다시 start recording을 또 하는걸 원하지 않기 때문.

그래서 catch후에 finally를 추가함 이건 try나 catch중 하나라도 실행되면 finally가 실행됨.

finally에 recorBtn.removeEventListener("click", startRecording); 을 넣어주자. 

만약 내가 권한을 얻었고 버튼이 Stop recording으로 바뀌거나 권한을 얻지못하여 Cant record로 버튼이 바꼈을경우

버튼의 text만 바뀐것이지 버튼을 click 했을때 아직 startRecording이 살아있음. 그걸 없애기위해 finally를 추가하여 이벤트를 삭제하는것.

나는 stop recording에서 눌렀을때 녹화된 파일을 저장하는 이벤트를 달아야하기때문에 위와같이 진행함.

기존의 startRecording을 getVideo로 바꾸자 이때까지한건 비디오를 얻는 행위였음 녹화가아님.

그리고 startRecording의 새로운 함수를 만듦.

getVideo안의 stream은 010101같은 거고 우린 그걸 streamObject = stream;으로 다시 정의할거임. 

전역변수로 let streamObject를 선언했으니 어디서나 stream을 쓸 수 있음.

그리고 getVideo에서 try마지막구문에 startRecording(); 함수를 호출함. 

이제 MediaRecorder()라는 함수를 다뤄보자. 제공되고있는 함수임. 이 함수는 media를 record하는거임.

new MediaRecorder object는 레코드 하기 위해 MediaStream이 필요하다고 공식문서에 적혀있음.

우리는 stream을 streamObject에 담아놨음 그리고 그 stream은 getVideo의 mediaDevices.getUserMedia를 통해 얻었음.

startRecording함수에  videoRecorder = new MediaRecorder(streamObject);을 선언해줌.

선언한 videoRecorder를 videoRecorder.start(); 이렇게 시작해야 데이터를 얻을 수 있음. 

이로서 우리는 비트를 레코딩하고있는것이다. 이 비트에 접근할 수있지만 그걸로 무언가 하고있지않음. 비트를 어디로 보내야함.

videoRecorder.addEventListener("dataavailable", handleVideoData); 다음과같이 dataavailable이라는 이벤트가 존재함.

이건 videoRecorder안에 들어있는 ondataavailable이라는 놈이 있다는걸 인식할 수 있음.

recordBtn.addEventListener("click", getVideo); 이것과 같은건 recordBtn.onclick = getVideo임.

왜 addEventListener를 쓰냐, onclick은 단지 한개의 onclick 이벤트밖에 못가짐. 근데 나는 여러개의 onclick 이벤트를 넣을 수 있음.

그게 addEventListener임. 만약 recordBtn.onclick = null을 하면 모든걸 삭제시킴 그래서 remove를씀.

만약 어떤 객체(object)가 ondataavailable이라는 이벤트를 제공한다면 videoRecorder.addEventListener("dataavailable");라고 할 수있음.

그래서 우리는 함수를 만들거다 const handleVideoData = event = {} 이런식으로. 

videoRecorder.addEventListener("dataavailable", handleVideoData); 이걸통해 handleVideoData로 날림.

==============================#9.1 END================================

MediaRecorder는 레코딩이 다 끝나야 ondataavailable을 얻을 수 있음.

dataavailable이벤트는 레코딩이 멈췄을때 handleVideoData함수로 이동하게됨.

이벤트가 발생하면 우린 Blob을 얻는데 이건 0,1로 구성된 파일임. 일단 videoRecorder를 전역에서 쓸 수 있게 let으로 선언하자.

우리는 레코딩을 멈춰줘야 파일을 받을 수 있으니 멈추는 함수를 만들자

const stopRecording = () => {
  videoRecorder.stop();
  recordBtn.removeEventListener("click", stopRecording);
  recordBtn.addEventListener("click", getVideo);
  recordBtn.innerHTML = "Start recording";
};

다음과 같이 멈추는 함수를 만들었음.

그리고 이함수에 접근하기위해 startRecording에 recordBtn.addEventListener("click", stopRecording);를 추가함.

getVideo로 stream을 얻은상태로 startRecording으로 이동하여 그 stream을 이용해 MediaRecorder를 사용한다.

그리고 레코딩이 시작되면 정보를 받을거고 recordBtn.addEventListener("click", stopRecording); 다음과같이 버튼을 눌렀을때 스탑레코딩으로 넘어감.

스탑레코딩함수로 이동하면 videoRecorder.stop()으로 레코딩을 멈출거고 레코딩이 멈춤면 데이터를 받음

handleVideoData에선 그데이터를 다운로드까지 이어주는 함수를만들어줄 거임.

const handleVideoData = event => {
  const { data: videoFile } = event;
  const link = document.createElement("a");
  link.href = URL.createObjectURL(videoFile);
  link.download = "recorded.webm";
  document.body.appendChild(link);
  link.click();
};

dataavailable이벤트를 통해 handleVideoData함수가 event인자에서 data를뽑아냄 그 data를 videoFile이라고 변수명을 줬다.

link변수를 정의하자 거기엔 a(앵커) 태그를 body에 생성해줄거임. link를 생성하는 이유는 download는 기본적으로 링크이기때문 

link.href 주소는 = data즉 videoFile의 URL이어야함 그걸 URL.createObjectURL을통해 받아왔음.

그리고 link.download = "recorded.webm" webm은 오픈소스이기 때문에 쓰는거고 recorded는 파일명임.

이제 link(a)는 주소를가짐. 이걸 document.body에 자식요소로 넣을거임 body에 표시됨 그리고 link.click(); 을페이크로줌

우리가 직접누르는게아님. 페이크로 넣어주면 a(link)를 클릭하라는 명령어고 명령어에의해 파일이 다운로드됨.

==============================#9.2 END================================



