https://interconnection.tistory.com/74 ( 쿠키, 세션에 대한 개념 )

이제 인증(authentication) 기능을 위해 Passport를 사용할거다 middleware임.

인증이란 ? 브라우저 상에 쿠키(Cookies)를 설정해주면, 그 쿠키를 통해서 ID 등을 알 수 있을 테고,

Passport가 브라우저에서 자동으로 쿠키를 가져와서 인증이완료된 User object를 controller에 넘겨줄거다.

웬만한 서비스는 거의 다있고, Passport 모듈의 장점은, 다른 모듈들도 지원해준다는 것이다.

Passport를 사용하기전 우리는 쿠키(cookies)에 대해서 이해해야 한다.

쿠키는 우리가 브라우저에 저장할 수 있는 것들인데 inspect(f12) 검사로 들어와 storage->cookies에서 쿠키들을 볼 수 있다.

쿠키는 브라우저에 저장할 수 있는 어떤 것들인데, 모든 요청에 대해서 백엔드로 전송될 정보들이 담겨있다. 이런 일들은 자동적으로 일어난다.

예를들어, 클라이언트(웹브라우저)에 쿠키가 있을 때, 서버에서 뭔가 requset-요청(로그인, 가입, 홈으로가기 등등)할 때마다

브라우저가 자동적으로 쿠키들을 서버로 전송해준다. 다 자동적으로 벌어지는일.

그리고 Passport가 하는 일은 쿠키를 생성하고, 브라우저에 저장시켜주고, 유저에게 해당 쿠키를 준다. 

passport 홈페이지에서 정의한 인증 부분을 보자.

app.post('/login',
  passport.authenticate('local'),
  function(req, res) {
    // If this function gets called, authentication was successful.
    // `req.user` contains the authenticated user.
    res.redirect('/users/' + req.user.username);
  });

통합시키가 쉬운편이다. 코드와 함께 보자.

예를들어 누군가 /login으로 post 시켰을때, passport.authenticate('local')을 호출함.

여기서 'local'은 Stragegy(전략) 이라고 불리는건데, 우리의 경우에는 facebook이나 github를 쓸 수있음.

그리고 인증이되면 function이 실행되고 res.redirect한다. 코드에서 보면 알겠지만 인증이 완료되면 passport 스스로

req.user를 만들어준다. 이게 바로 현재 로그인한 사용자가 될거다.

passport는 우릴 위해 모든 걸 다 처리해준다. 쿠키도 만들어주고, 그 쿠키를 받고, 어느 유저가 어느 쿠키를 가지고 있는지 기억할 것이고

모든걸 다알아서 해주기때문에 우리가 나설필요가 없음.

그리고 모듈을하나보자 Passport-Local Mongoose. 이건 사용자 기능을 추가하는 건데, User model을 위한거다.

우리는 User model을 만들지않음. 이번 파트에서 만들거임. PLM은 기본적인 사용자 인증에 필요한걸 만들어줌

패스워드 변경, 패스워드 확인, 패스워드 생성, 패스워드 암호화등 세상 모든 애플리케이션이 기본적으로 필요하는 것들을.

models에 User.js를 만들자 이제 user object를 만들게 되는것이지.

=============================#6.0 END==========================

User에 model을 만들자. 

먼저 import mongoose를 해줌. 그리고 UserSchema 생성.

이름, 이메일, 소셜계정을 위한 ID( 예를들어, 누군가 깃헙 계정으로 로그인하면, 그의 깃헙 ID를 저장하려는것 )

그래서 나중에는 이 모든 것을 하나의 사용자로 묶어줄 수 있게 된다.

내가 이메일을 써서 로그인하려고 하는데, 알고보니 이미 깃헙 계정으로도 가입했다는 것이 확인되면, 로그인 하는사람에게 알려줄 수 있지

넌 지금 이메일로 로그인하려고 하는데 넌 이미 깃헙으로 가입이 되어있다고. (중복방지)

계정은 깃헙이나, 페이스북 같은 다른 서비스를 통해서 가입할 수 도 있다. 그리고 이렇게 만든 계정들에는 패스워드가 없을 거다.

만약 사용자 정보에 이메일도 저장하고, 또 소셜 계정도 저장한다면, 너는 사용자 인건 맞는데 소셜서비스를 통해서 로그인 할 수 있을거야

이메일이 아니라. 라고 알려줄 수 있다. 사람들은 이메일로 가입한지 소셜을통해 가입을 했는지 잊어버리기 때문.

그리고 어떤 사람이 이메일을 입력했는데 이 이메일을 가진 깃헙 아이디가 있다는게 확인되면, 니 계정에는 패스워드가 없다.

패스워드를 만들어서, 소셜계정을 이용하거나, 또는 이메일을 이용해서도 로그인 할 수 있을거라고 알려 줄 수 있음.

그리고 AvatarUrl도 추가. 이건 우리가 만든 fileUrl과 똑같이 동작할거임. 같은 방식으로 URL을 얻을거임

서버로부터의 URL일 수도있다. -> 사용자가 서버에 업로드하도록 한다면.

아니면 깃헙으로부터의 URL이 될 수도있음. 깃헙이나 페이스북 프로필 사진이.

그리고 우리의 경우엔 facebookId, githubId로 스키마를짬.

최종적으로 아래의 코드와 같이 스키마를 짬.

  name: String,
  email: String,
  avatarUrl: String,
  facebookId: Number,
  githubId: Number

만들어진 스키마로 model을 생성하고 export까지하자..

const model = mongoose.Model("User", UserSchema);

export default model;

그리고 만들어진건 init에 import시켜서 사용하자.

아직 User.js에는 passport의 개입이 이뤄지지않음. 왜냐면 그전에 우린 passport-local-mongoose를 먼저 쓸거니까.

npm i passport-local-mongoose로 설치. 이게 결국 패스워드 설정, 패스워드 확인 등등 그런 것들을 자동으로 해주는 것이다.

설치를 했으니 import ! import할때 import다음의 텍스트는 중요한게아님 아무거나 해도됨 from다음의 "passport-local-mongoose"는 바꾸면 안됨

그리고 plugin해주자. 그리고 passportLocalMongoose는 설정객체가 필요함.

우리가 쓰려고하는 옵션은 usernameField이다. 이것은 username이 될 field명을 명시해주는 기능을 가지고 있음.

우리는 지금 username(사용자이름)과 password(패스워드)를 이용한 인증부터 하려고 하기 때문.

사용자이름은 사용자의이름(Lesa)가 될 수도 있고, 이메일이 될 수도 있다. 어떤 field를 username으로 할 것인지를 알려주자.

이름이나 이메일 모두가능하지만 우리의경우 이메일로하자 그러는 이유는 뭔가를 체크할 필요가 없기 때문이다.

username의 문제점은 누가 그걸 변경하게 되면 맞냐 틀리냐를 확인해야하고 그런 것들이 엄청 번거롭기때문.

우리는 passportLocalMongoose가 있으니까 얘가 모든걸 해줄거임.

UserSchema.plugin(passportLocalMongoose, {usernameField: "email"}); 로 작성. 이렇게 작성하면,

우린 user를 가지고 여러가지 method를 쓸 수 있게 된다. 

여기까지 작성했지만 우린 아직 인증에 관해선 아무것도 한 게 없다. 인증에 관련된 기능을 사용할 방법을 가지고있지만

사용자 인증까지 한건 아니다. 파일을하나더 만들자 바깥에 passport.js 생성.

이 안에 strategy랑 필요한 것들을 넣을 것이고. 일단 passport, passport-loacl을 설치.

passport는 passport그자체고 passport-local은 username과 password를 쓰는 사용자 인증 방식(strategy)를 의미.

지금은 passport-local을 설치할 거고, 이따가 passport-facebook, passport-github 같은 것도 설치해서 쓸거임.

npm i passport passport-loacl 설치. 설치를 했으니 import하자 passport.js에. 그리고 User도 가져오자.

이제 해야할건 passport에게 strategy를 하나 사용해라고 말할거임 strategy는 로그인 방식(페이스북, 깃헙, username&&password로 로그인하기)

지금 이 경우에는 passport-local-mongoose가 제공하는 strategy를 사용하려고 함. ( username && password를 쓰는 strategy )
-> passport.use(User.createStrategy());

createStrategy() 이걸 쓰는건 굉장한 지름길임 strategy를 쓰면 여러줄의 코드를 써야하는데 이걸 createStrategy()로 해결가능.

=============================#6.1 END==========================








