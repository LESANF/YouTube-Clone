https://interconnection.tistory.com/74 ( 쿠키, 세션에 대한 개념 )

이제 인증(authentication) 기능을 위해 Passport를 사용할거다 middleware임.

인증이란 ? 브라우저 상에 쿠키(Cookies)를 설정해주면, 그 쿠키를 통해서 ID 등을 알 수 있을 테고,

Passport가 브라우저에서 자동으로 쿠키를 가져와서 인증이완료된 User object를 controller에 넘겨줄거다.

웬만한 서비스는 거의 다있고, Passport 모듈의 장점은, 다른 모듈들도 지원해준다는 것이다.

Passport를 사용하기전 우리는 쿠키(cookies)에 대해서 이해해야 한다.

쿠키는 우리가 브라우저에 저장할 수 있는 것들인데 inspect(f12) 검사로 들어와 storage->cookies에서 쿠키들을 볼 수 있다.

쿠키는 브라우저에 저장할 수 있는 어떤 것들인데, 모든 요청에 대해서 백엔드로 전송될 정보들이 담겨있다. 이런 일들은 자동적으로 일어난다.

예를들어, 클라이언트(웹브라우저)에 쿠키가 있을 때, 서버에서 뭔가 requset-요청(로그인, 가입, 홈으로가기 등등)할 때마다

브라우저가 자동적으로 쿠키들을 서버로 전송해준다. 다 자동적으로 벌어지는일.

그리고 Passport가 하는 일은 쿠키를 생성하고, 브라우저에 저장시켜주고, 유저에게 해당 쿠키를 준다. 

passport 홈페이지에서 정의한 인증 부분을 보자.

app.post('/login',
  passport.authenticate('local'),
  function(req, res) {
    // If this function gets called, authentication was successful.
    // `req.user` contains the authenticated user.
    res.redirect('/users/' + req.user.username);
  });

통합시키가 쉬운편이다. 코드와 함께 보자.

예를들어 누군가 /login으로 post 시켰을때, passport.authenticate('local')을 호출함.

여기서 'local'은 Stragegy(전략) 이라고 불리는건데, 우리의 경우에는 facebook이나 github를 쓸 수있음.

그리고 인증이되면 function이 실행되고 res.redirect한다. 코드에서 보면 알겠지만 인증이 완료되면 passport 스스로

req.user를 만들어준다. 이게 바로 현재 로그인한 사용자가 될거다.

passport는 우릴 위해 모든 걸 다 처리해준다. 쿠키도 만들어주고, 그 쿠키를 받고, 어느 유저가 어느 쿠키를 가지고 있는지 기억할 것이고

모든걸 다알아서 해주기때문에 우리가 나설필요가 없음.

그리고 모듈을하나보자 Passport-Local Mongoose. 이건 사용자 기능을 추가하는 건데, User model을 위한거다.

우리는 User model을 만들지않음. 이번 파트에서 만들거임. PLM은 기본적인 사용자 인증에 필요한걸 만들어줌

패스워드 변경, 패스워드 확인, 패스워드 생성, 패스워드 암호화등 세상 모든 애플리케이션이 기본적으로 필요하는 것들을.

models에 User.js를 만들자 이제 user object를 만들게 되는것이지.

=============================#6.0 END==========================

User에 model을 만들자. 

먼저 import mongoose를 해줌. 그리고 UserSchema 생성.

이름, 이메일, 소셜계정을 위한 ID( 예를들어, 누군가 깃헙 계정으로 로그인하면, 그의 깃헙 ID를 저장하려는것 )

그래서 나중에는 이 모든 것을 하나의 사용자로 묶어줄 수 있게 된다.

내가 이메일을 써서 로그인하려고 하는데, 알고보니 이미 깃헙 계정으로도 가입했다는 것이 확인되면, 로그인 하는사람에게 알려줄 수 있지

넌 지금 이메일로 로그인하려고 하는데 넌 이미 깃헙으로 가입이 되어있다고. (중복방지)

계정은 깃헙이나, 페이스북 같은 다른 서비스를 통해서 가입할 수 도 있다. 그리고 이렇게 만든 계정들에는 패스워드가 없을 거다.

만약 사용자 정보에 이메일도 저장하고, 또 소셜 계정도 저장한다면, 너는 사용자 인건 맞는데 소셜서비스를 통해서 로그인 할 수 있을거야

이메일이 아니라. 라고 알려줄 수 있다. 사람들은 이메일로 가입한지 소셜을통해 가입을 했는지 잊어버리기 때문.

그리고 어떤 사람이 이메일을 입력했는데 이 이메일을 가진 깃헙 아이디가 있다는게 확인되면, 니 계정에는 패스워드가 없다.

패스워드를 만들어서, 소셜계정을 이용하거나, 또는 이메일을 이용해서도 로그인 할 수 있을거라고 알려 줄 수 있음.

그리고 AvatarUrl도 추가. 이건 우리가 만든 fileUrl과 똑같이 동작할거임. 같은 방식으로 URL을 얻을거임

서버로부터의 URL일 수도있다. -> 사용자가 서버에 업로드하도록 한다면.

아니면 깃헙으로부터의 URL이 될 수도있음. 깃헙이나 페이스북 프로필 사진이.

그리고 우리의 경우엔 facebookId, githubId로 스키마를짬.

최종적으로 아래의 코드와 같이 스키마를 짬.

  name: String,
  email: String,
  avatarUrl: String,
  facebookId: Number,
  githubId: Number

만들어진 스키마로 model을 생성하고 export까지하자..

const model = mongoose.Model("User", UserSchema);

export default model;

그리고 만들어진건 init에 import시켜서 사용하자.

아직 User.js에는 passport의 개입이 이뤄지지않음. 왜냐면 그전에 우린 passport-local-mongoose를 먼저 쓸거니까.

npm i passport-local-mongoose로 설치. 이게 결국 패스워드 설정, 패스워드 확인 등등 그런 것들을 자동으로 해주는 것이다.

설치를 했으니 import ! import할때 import다음의 텍스트는 중요한게아님 아무거나 해도됨 from다음의 "passport-local-mongoose"는 바꾸면 안됨

그리고 plugin해주자. 그리고 passportLocalMongoose는 설정객체가 필요함.

우리가 쓰려고하는 옵션은 usernameField이다. 이것은 username이 될 field명을 명시해주는 기능을 가지고 있음.

우리는 지금 username(사용자이름)과 password(패스워드)를 이용한 인증부터 하려고 하기 때문.

사용자이름은 사용자의이름(Lesa)가 될 수도 있고, 이메일이 될 수도 있다. 어떤 field를 username으로 할 것인지를 알려주자.

이름이나 이메일 모두가능하지만 우리의경우 이메일로하자 그러는 이유는 뭔가를 체크할 필요가 없기 때문이다.

username의 문제점은 누가 그걸 변경하게 되면 맞냐 틀리냐를 확인해야하고 그런 것들이 엄청 번거롭기때문.

우리는 passportLocalMongoose가 있으니까 얘가 모든걸 해줄거임.

UserSchema.plugin(passportLocalMongoose, {usernameField: "email"}); 로 작성. 이렇게 작성하면,

우린 user를 가지고 여러가지 method를 쓸 수 있게 된다. 

여기까지 작성했지만 우린 아직 인증에 관해선 아무것도 한 게 없다. 인증에 관련된 기능을 사용할 방법을 가지고있지만

사용자 인증까지 한건 아니다. 파일을하나더 만들자 바깥에 passport.js 생성.

이 안에 strategy랑 필요한 것들을 넣을 것이고. 일단 passport, passport-loacl을 설치.

passport는 passport그자체고 passport-local은 username과 password를 쓰는 사용자 인증 방식(strategy)를 의미.

지금은 passport-local을 설치할 거고, 이따가 passport-facebook, passport-github 같은 것도 설치해서 쓸거임.

npm i passport passport-loacl 설치. 설치를 했으니 import하자 passport.js에. 그리고 User도 가져오자.

이제 해야할건 passport에게 strategy를 하나 사용해라고 말할거임 strategy는 로그인 방식(페이스북, 깃헙, username&&password로 로그인하기)

지금 이 경우에는 passport-local-mongoose가 제공하는 strategy를 사용하려고 함. ( username && password를 쓰는 strategy )
-> passport.use(User.createStrategy());

createStrategy() 이걸 쓰는건 굉장한 지름길임 strategy를 쓰면 여러줄의 코드를 써야하는데 이걸 createStrategy()로 해결가능.

=============================#6.1 END==========================

serializeUser, deserializeUser 를 알아보자.

serializeUser는 기본적으로, 어떤 정보를 쿠키에게 주느냐를 의미한다.

지금 웹브라우저(즉, 클라이언트)에 있는 사용자에 대해서, 어떤 정보를 가질 수 있느냐, ( 쿠키는 사용자 ID가 1이라는 정보 )

쿠키에 있는 정보는 자동적으로 백엔드에 보내지고, 백엔드에서 사용자ID가 1인 사용자가 누구인지 알게 됨.

그런 정보가 쿠키에 저장되는거지.

serialization은 어떤 field가 쿠키에 포함될 것인지 알려주는 역할을 한다. 쿠키에 너무 많은 정보를 주면안됨

쿠키는 아주 작아야하고 민감한 정보는 담으면 안된다. 누군가 그정보에 접근할 위험이 있음.

passport.serializeUser(function(user, done){ done(null, user.id); }); 는 쿠키에 user.id만 담게 되어있다.

오로지 id만 전송하게되고 사용자가 브라우저에서 쿠키를 열어본다면, 쿠키에는 숫자 하나, 즉 id만 보일 거임.

deserializeUser는 어느 사용자인지 어떻게 찾는가이다. 만약 쿠키를 받아봤는데 id가 1라면, 

desirialize는 그 쿠키의 정보를 어떻게 사용자로 전환하는가를 의미한다. 이런 부분을 설명하는 이유는

passport-local-mongoose의 도움으로 지름길을 쓸 것이기 때문이다. serializeUser와 deserializeUser가 이미 제공되고 있기 때문에

따로 우리가 할필요가없다.

passport.serializeUser(User.serializeUser()); 이코드를 passport.js에 입력하자

코드의 의미는 passport에게 쿠키에는 오직 user.id만 담아서 보내도록 해라고 지시하는 것이다.

그리고 deserialize를 바로해주자. passport.deserializeUser(User.deserializeUser()); 를 바로추가. 

이렇게 간편하게 지름길을 이용해서 작성하는 이유는, 전세계 모든 이들이 이렇게 똑같이 함수를 시행하기 때문이다.

일반적으로 사람들은 쿠키에 user.id를 담고, 그다음에 그 id로 사용자를 식별한다 기본적으로.

이렇게 passport가 사용자 인증을 처리할 수 있도록 설정이 되었다.

globalRouter.js로 이동, 우리는 get, postJoin을 만들었었다. postJoin을 수정해보자.

패스워드가 맞는지 체크하는 미들웨어를 하나 넣을거기때문. userController로 가서 postJoin을 수정하자.

else에 우리가 해야할일로 가입, 로그인처리를 해야하는 이부분을 할거임 일단 User model을 가져오자.

passport-local-mongoose를 보면 register를 제공한다. 먼저 계정을 생성하고 이를 가입(register) 시키자.

res하는걸 기다려야하니 비동기식 await를 사용. awiat를 사용한다 ? = async도 필요하다. 둘은 한쌍.

if문으로 우리는 password, password2를 비교 즉 가입할때 비밀번호 체크하는 부분을만듦. 같을경우 else로 회원가입진행.

일단 객체를 생성해야하니 await User({});로 틀을가져오자. User.create()를 사용하면 객체를 생성하고 DB에 올려버리기 때문에. 이미 있는 사용자라고 뜬다. 그래서 진행이안됨.

가입하려면 일단 이름, 이메일이필요 패스워드는 나중에 만들것. 틀을만들었으면 register하자

register는 User object(유저 객체)가 필요. await User.register(user, password); register는 user, password가 필요하고 user는 우리가만든 객체이며 name, email을 가지고있음

그리고 좀더 세련되게 만들기위해 try, catch구문 추가. 서버를 열어서 JOIN을가서 가입을해보자. 

정상적으로 가입이되었다. home으로 redirect했고. mongoDB를 통해 데이터베이스를 들여다봐도 가입이 된걸 확인할 수 있다.

users에 _id : ObjectId, name, email, salt, hash등이있는데 그중 salt, hash는 패스워드를 암호화시켜주는거다. 내가입력한 패스워드는(12345)

그전에 우리는 쿠키를보러가보자. 지금 쿠키는 fontawesome에서 온 쿠키밖에없음. 지금 내가 한일은 사용자를 등록했다.

아직 이사용자를 로그인 시켜주지 않았음. 여기서 두 가지 방법으로 나뉜다.

1. 등록한 다음에 로그인 화면으로 보내서 로그인 하라고 하는 방법.

2. 등록한 다음에 그냥 자동으로 로그인 시켜버리는것 (우리는 이방법으로 할 것)

일단 테스트를 마쳤으니 사용자정보를 삭제하자.

=============================#6.2 END==========================

이제 가입시킬 수 있다, 하지만 로그인을 시키지않았음.

userController로와서 join을 처리하는 postJoin을 middleware로 바꿀거다.

미들웨어는 함수의인자가 req, res, next이고 이 controller를 다른 controller로 보내는거기때문에 next()도 시켜야함. 안하면 무한로딩

가입하고 바로 로그인으로 넘기는거임 위에설명한 2번째 방법으로 자동으로 로그인하는거다 try끝 부분에 next()넣어주자.

그리고 이제 res.redirect(route.home)은 사용하지않을거임 에러났을때 res.redirect(routes.home)으로 넣어주자 catch안에.

일단 지금까지한건 사용자가 가입은 되어있음. register로 가입하고 DB까지 올라가있음.

이제 로그인해주는 컨트롤러를 만들자. 이건 새롭게 만드는게아니라 postLogin을 수정해주면됨 postLogin은 결국 passport의 함수가 될거기때문.

그리고 passport는 지금 username과 password를 찾도록 설정되어있기때문. 그것들은 postJoin에 이미있음 name, password로

next다음 postLogin이 오게하면되니까 globalRouter로가서 postJoin을 미들웨어위치로주고 다음 postLogin을 추가해주자.

join 화면에서 username과 password를 넣어줬을 때, postJoin에서 가입하고 postLogin에서 로그인 시킨다.

postJoin에서 받은 username(우리는 email)과 password 정보들을 postLogin으로 보내도록 한다. 마치 form을토해 postLogin에게 정보를 주듯이.

우선 passport를 userController에서 쓰기위해 import하자. passport불러오는걸 맨위로하자. 패키지를 가져오고 파일을 가져오는 방향으로.

postLogin을 아래의 코드와 같이 변경.

export const postLogin = passport.authenticate("local", {
  failureRedirect: routes.login,
  successRedirect: routes.home
});

authenticate는 passport에서 제공하는 함수고, "local"은 우리가 쓴 strategey, 뒤에 객체는 authenticate의 옵션들임.

실패하면 다시로그인 해야함으로 login화면으로, 로그인이 성공됐다면 home으로.

기억해야한다 passport.authenticate()는 username(우리는 email), password를 찾아보도록 설정되어있음. (위에 register의 설정임)

미들웨어는 정보를 다음 것으로 넘겨주는 것이고, postJoin은 이메일, 패스워드 등 정보들을 받아 가입시키고, next()가 호출되면서 다음것으로가고

같은 정보를 전달하게 되는데, 다음 것인 postLogin은 사용자를 로그인 시켜주는거임.

테스트하기전에 middlewares.js로가서 res.locals.user에대한것을 수정하자. 

그이유는, passport가 사용자를 로그인 시킬 때, 쿠키나 serialize, deserialize등의 기능을 다 지원해줌은 물론이고, user가 담긴 object를 요청(request)에도 올려줄 거기때문.

이렇게해야 우리 템플릿들이 이 user에 접근 가능하게 할 수 있다.

그리고 app으로가서 해당 passport를 가져오고 사용해야함. 그리고 route들 이전에 초기화와 세션을저장해줘야함.

app.use(passport.initialize());
app.use(passport.session());

우리는 실행된 cookiePasrser로부터 쿠키가 내려와서 initialize(초기화)되고, 그 다음엔 passport가 스스로 쿠키를 들여다봐서, 그 쿠키 정보에 해당하는 사용자를 찾아줄거다.

그리고 passport는 자기가 찾은 그 사용자를 요청(request)의 object, 즉 req.user로 만들어준다.

그렇게 req.user를 받으면 user object를 템플릿들에게 추가시켜줄 수 있음. 예로 템플릿중 header로가면, user.isAuthenticated부분이 문제없이 작동할 것이다.

여기서 테스트를위해 JOIN으로 접근하면 에러가 뜰건데 그이유는 user가 존재하지않기때문. 만들어놓은게 없어서 req.user가 없음. 그러니 res.locals.user = req.user || {}로 

{} 빈객체를 주자. 그러면 연결됨.

header에 user는 원래 res.locals.user = isAuthnticated : true, id : 999인 객체를 테스트용으로 만들어줬지만 지금은 실제로 passport로인한 register 가입으로인해 만들어지기 때문.

하지만 처음은 user가 없기때문에 이부분에대해 연결자체가 안된다 그걸 방지하기위해 {}로 객체를 만들어두면 에러없이 페이지에 연결됨.

이러고 다시 JOIN form으로 돌아가서 정보를 채우고 가입을하면 또 에러가남 Unknown authentication strategy "local", app.js에 passport.js를 안넘겨줘서그럼 import해주면됨.

정상적으로 가입이 되었기때문에 home으로 가지고 LOGIN을 해보면 성공적으로 home으로 돌아감. 잘못된 정보를 적으면 LOGIN화면으로 돌아가짐.

근데 한가지 문제점이 생겼다 쿠키가 생성이안됨. 우리는 세션을 사용하기에 앞서 express-session을 설치하지 않았기 때문.

express-session은 session을 관리해주기 위해 필요한 거다. 쿠키를 이용하기위해 express-session을 설치하고  셋팅을 해줘야함.

session 데이터는 쿠키 자체에 저장되지 않음 그래서 우린 session이 필요함.








