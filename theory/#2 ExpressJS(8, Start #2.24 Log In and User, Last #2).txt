< Login >

Join은 완료했고 Login을 할 차례. 로그인도 Join과 비슷한 작업을 해야한다.

postLogin 함수를 만들자 (userController.js) 
-> getLogin, postLogin으로 함수 생성.

postLogin 함수는   res.redirect(routes.home); 과같이 내용작성.

form에 정보를 입력하고 post로 데이터를 넘기고 로그인이 성공하면 home으로 가야되기때문.

나중에는 사용자 비밀번호가 데이터베이스에 있는 것과 같은지 검사해야한다. 지금은 테스트니까 일단 redirect하는걸로.

만약 로그인과정에서 에러가있으면 다시 login화면을 표시해야한다. ( 지금은 테스트니까 나중에 추가 )

globalRouter로 이동하여 login을 getLogin으로 바꾸고 postLogin도 하나더 추가.

서버를켜서 테스트를해보면 login폼에서 Log in을 누르면 home으로 돌아감. 

이제 header 템플릿으로가서 이 navigation을 조금 수정한다.

header로가서 login, join을 링크로 표시해주는 .header__column 부분을 수정한다.

로그인이 정상적으로 돼었을때, 로그인이 아닐 때 보이는 header부분이 달라야되기때문.

if/else문을사용하고 if조건으로는 !user.isAuthenticated (로그인 상태가 아닐때) 
-> Join, Login 표시

else일때 로그인상태에서 보여지는 링크를 띠운다.
-> Upload, Profile, LogOut 표시

user에 대한 정보가 없기때문에 middlewares.js에서 res.locals.user를 만들고 isAuthenticated : true, id: 999인 객체를 입력한다.

middlewares.js를 거치고 경로들로 접속하기 때문에 locals로 설정한 모든것을 사용할 수 있다.

테스트를 위해 만드는 가짜정보이고 실제 사용자 정보가 있으면 대체될 코드이다.

여기서 문제가 하나있다. profile 링크를 눌러서 이동해보면 /:id 주소로 이동한다. 
->profile을 크롬기준(f12 검사) 해보면 a href="/:id"로 되어있음. 이것을 미들웨어에 설정된 id가 url에 들어가도록 하고싶음.

만약 user에 id가 있다면 id가 포함된 주소로 가도록 하고싶다.

해당 링크는 route에 대한 설명이 아니라 실제 route의 실행이 필요함. id가 url에 들어가도록 수정해야한다.

routes.js로 이동하여 const routes로 선언한 객체에서 userDetail에 대한 부분을 함수로 수정한다.

객체에 대한 함수선언은 다음과 같이한다

userDetail: id => {
if (id) {
   return `/users/${id}`;
} 
else {
    return USER_DETAIL;
}

인자로 id를 받고, id가있으면 id를 포함한 주소를 return하고 아니면 USER_DETAIL(/:id)를 return함.

이렇게 rotues.js에 함수 선언을했으면. 이제 사용할차례다 실제로 실행시켜야함.

userRouter.js로 가면 routes.UserDetail에대한 경로가 있는데 이경우에는 id를 인자로 받아 실행하지 않으니 /:id를 받음.

하지만 템플릿(pug)에서 접근하는건 인자가 필요하다.  a(href=routes.userDetail(user.id)) Profile 이렇게 수정.

locals에 객체화해둔 id(999) 즉 user.id를 userDetail의 인수로 넘겨줌 거기에선 id로 인식. 수정후 Profile 링크를 클릭.
-> 제대로 /users/999로 이동하면서 userDetail.pug의 내용을 출력함.

이제 /:id와 관련된것들도 모두 수정해야한다. videoDetail도 함수화시켜서 수정.

지금은 가짜데이터로 작업하지만, 이런 방식으로 하면 나중에 실제데이터가 있을 때 빠르게 작업할 수 있다.
-> 데이터베이스 부분만 추가하면 되기 때문.

==========================================#2.24 End==================================

로그인성공 -> Profile 링크 클릭 -> 사용자 정보확인가능 ( 메커니즘 구현. 실제내용X 가짜 db로 테스트중 )

UserDetail 페이지는 잠시 놔두고, 누군가 비디오를 클릭하면 비디오 상세 페이지로 보이도록 하고싶다.
-> mixin 수정.

videoBlock.pug로 이동하여 video, h4, h6내용을 모두 a링크 안쪽으로 넣음. 
-> 주소는 a(href=routes.videoDetail(video.id))

mixin 인자로 들어올 id를 home.pug에 +videoBlock에도 추가해야함. id : item.id <<

routes.js에 경로들을 함수로 만들었으니 함수를 실행시켜야함 videoRouter.js에 videoDetail을 videoDetail()로 함수실행처리.

함수로 바꿧으니 그냥 경로에있는 videoDetail을 바꿔줘야함. 
-> 정상적으로 db.js에 있는 id로 연결된다 videos/11111 같이.

< Log Out >

로그아웃을 클릭하면 home으로 redirect하기전에 로그아웃 처리를 먼저한다음 redirect한다.

userController.js로 이동하여 함수를 수정한다. res.render를 없애고 res.redirect(routes.home)작성. home으로 redirect

//To do : Process Log Out

로그아웃 처리하는걸 할 일로 남겨만 두자.

Logout페이지가 쓸모가 없기 때문에 (바로 리다이렉트하기때문) Logout.pug 삭제
-> 만약 로그아웃하기전에 "너는 로그아웃 하겠니?" 라는 알림창이나 메시지를 남기고싶으면 페이지를 삭제안하고 설정할 수 있음.

logout을 눌러보면 home으로 리다이렉트 되는걸 확인할 수 있다.

< Upload >

upload 링크를 누르면 경로가 없다고 뜰것이다.

이유는 /upload이기 때문. 정확한 경로는 videos/upload

header.pug로 돌아와 Upload의 링크에 `/videos${routes.upload}`로 재정의. routes.upload = /upload

Upload.pug로 돌아와 form 내용은 `/videos${routes.upload}`로 보내고 있다.

이요청에 응하기위해 post형식의 접근이 필요하고 앞선 join, login처럼 get,postUpload 경로를 잡아주고 

videoController에 함수를 수정해준다.

기존에 있던 Upload를 getUpload로 수정하고 postUpload함수도 추가한다.

데이터를 넘길 post함수를 수정해보면, form에서 받아 다시 객체화시킬것은 file, title, description이다. es6문법으로 객체화시킨다.

나중에 할일을 적어두자 업로드, 비디오 저장.

비디오를 업로드한다고 가정해보자, 비디오에 해당하는 id를 가질수 있을 것이다.

video가 새로 생성되고, 생성된 데이터의 id를 가져오는 거다.

업로드 후에 사용자를 새로 생성된 비디오 id에 해당하는 videoDetail 페이지로 redirect 할 것이이다.
-> 
사용자가 비디오를 업로드 하고 나면, 새로운 id를 반환하고, 업로드 후에 사용자가 업로드한 비디오의 videoDetail 페에지로 이동시켜준다.
-> res.redirect(routes.videoDetail(111111));  / routes를 쓰기위해 import해줌.

파라매터로 111111을 준건 가짜 데이터의 id이다 redirect시 111111로 가는지 확인하기위하여 직접 넣은것. 메커니즘을 알기위해서 넣어본것.

Upload링크를 눌러서 get으로 접근하고 Upload Video버튼을 누르면 post식으로 redirect하여 `/videos/${id}`로 리턴. id=111111

111111 id는 내가 방금 업로드한 비디오의 id가 될것이다.

* 정리 *

컨트롤러에서 많은 작업을했다 redirect같은 작업들, Profile을 클릭하면 사용자 정보 페이지(User Detail)로 이동한다.

Upload, Log Out도 각각맞는 함수를 작성했다. 이제 보안을 신경써봐야 한다.

정보를 아무것도 입력하지 않고 Upload를 클릭해도 비디오 상세 페이지로 이동한다. 이것은 올바르지않다.

input들에게 required=true를 추가해준다.

upload에선 file, title, description / Join에선 name, email, password, password2 / login에선 email, password

editProfile같은 경우는 required같은게 필수가아님.

=================================END #2 EXPRESS ================================

